{"version":3,"sources":["webpack://squarefall/./src/constants.js","webpack://squarefall/./src/point.js","webpack://squarefall/./src/square.js","webpack://squarefall/./src/shape.js","webpack://squarefall/./src/grid.js","webpack://squarefall/./src/score.js","webpack://squarefall/./src/speed.js","webpack://squarefall/./src/game.js"],"names":["CANVAS","document","getElementById","CONTEXT","getContext","SQUARE_SIDE_LENGTH","Point","x","y","this","oldX","oldY","translate","rotateClockwise","rotateCounterClockwise","offsetX","offsetY","otherPoint","undefined","Square","point","fillStyle","sideLength","beginPath","fillRect","strokeStyle","arc","Math","PI","stroke","fillText","drawEdgePoint","color","clearRect","otherSquare","equals","clear","moveDown","draw","moveLeft","moveRight","transformClockwise","transformCounterClockwise","yLimit","Shape","pointOfTranslation","points","pointOfTranslationSquare","otherSquares","map","squares","largestY","calculateLargestY","smallestX","calculateSmallestX","largestX","calculateLargestX","getPointOfTranslationX","squareToRemove","hasOwnProperty","filter","square","forEach","drawPoint","drawCoordinates","drawEdgePoints","thisPoint","length","otherShape","sort","pop","shift","redraw","isBelowLimit","clearAndMoveDown","I","xCoordOfAppearance","super","otherPoints","init","O","point1","point2","point3","L","J","S","Z","T","Grid","shapes","movingShape","thereIsRoomToMoveDown","thereIsRoomToMoveLeft","thereIsRoomToMoveRight","moveShapeDown","shape","some","allPointsFitInsideGrid","noOtherShapeIsInTheWay","every","width","height","getLargestY","noOtherShapeIsInTheWayDown","getSmallestX","noOtherShapeIsInTheWayLeft","getLargestX","noOtherShapeIsInTheWayRight","amountOfPointsInRow","rowCount","fullRowCount","i","occupiedSquaresAndShapes","Map","set","size","remove","shiftDownward","rowIndex","clearAndMoveSquaresBelowYLimit","hasCommonPointWith","moveTo","lineTo","drawPoints","Score","high","getHighScore","innerText","current","highScore","localStorage","getItem","rowsCleared","value","newValue","setItem","Speed","delay","desiredSpeed","increase","Game","isPaused","setCanvasWidth","setCanvasHeight","window","setTimeout","hidden","style","display","grid","generatedShape","generateShape","push","score","speed","SCORE_PER_SPEED_INCREASE","MAX_SPEED","paused","event","key","pause","keyPressed","moveShapeLeft","rotateShape","moveShapeRight","clearInterval","heartbeatInterval","moveShapeToBottom","removeFullRows","requestScoreIncrease","requestSpeedIncrease","end","setInterval","self","heartbeat","drawAllPoints","drawLines","keyHandler","bind","addEventListener","pauseKeyHandler","screen","availWidth","desiredHeight","availHeight","shapeTypesAsArray","Object","values","ChosenShapeType","round","random","submit","showGameOverText","removeEventListener","currentSpeed","trunc","get","increaseIfNecessary","increment"],"mappings":"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","file":"main.js","sourcesContent":["const CANVAS = document.getElementById('gameCanvas');\nconst CONTEXT = CANVAS.getContext('2d');\n\nconst SQUARE_SIDE_LENGTH = 50;\n\nexport {\n  CANVAS,\n  CONTEXT,\n  SQUARE_SIDE_LENGTH,\n};","import {\n  SQUARE_SIDE_LENGTH,\n} from './constants.js';\n\nexport default class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  moveDown() {\n    this.y += SQUARE_SIDE_LENGTH;\n  }\n\n  moveLeft() {\n    this.x += -SQUARE_SIDE_LENGTH;\n  }\n\n  moveRight() {\n    this.x += SQUARE_SIDE_LENGTH;\n  }\n\n  transformClockwise(oldX, oldY) {\n    this.translate(-oldX, -oldY);\n    this.rotateClockwise();\n    this.translate(oldX, oldY);\n  }\n\n  transformCounterClockwise(oldX, oldY) {\n    this.translate(-oldX, -oldY);\n    this.rotateCounterClockwise();\n    this.translate(oldX, oldY);\n  }\n\n  translate(offsetX, offsetY) {\n    this.x = this.x + offsetX;\n    this.y = this.y + offsetY;\n  }\n\n  rotateClockwise() {\n    const oldX = this.x;\n    const oldY = this.y;\n\n    /*\n    We are performing a clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    90 degrees = Math.PI / 2 radians\n    Math.sin(Math.PI / 2) = 1\n    Math.cos(Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * 1 = -oldY\n    newY = oldX * 1 + oldY * 0 = oldX\n    */\n\n    this.x = - oldY;\n    this.y = oldX;\n  }\n\n  rotateCounterClockwise() {\n    const oldX = this.x;\n    const oldY = this.y;\n\n    /*\n    We are performing a counter-clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    -90 degrees = 3 * Math.PI / 2 radians\n    Math.sin(3 * Math.PI / 2) = -1\n    Math.cos(3 * Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * -1 = oldY\n    newY = oldX * -1 + oldY * 0 = -oldX\n    */\n\n    this.x = oldY;\n    this.y = -oldX;\n  }\n\n  equals(otherPoint) {\n    return otherPoint !== undefined &&\n      otherPoint instanceof Point &&\n      this.x === otherPoint.x &&\n      this.y === otherPoint.y;\n  }\n}\n","import {\n  CONTEXT,\n  SQUARE_SIDE_LENGTH,\n} from './constants.js';\n\nexport default class Square {\n  constructor(point, fillStyle) {\n    // The point of a Square always refers to its top left point\n    this.point = point;\n    this.fillStyle = fillStyle;\n    this.sideLength = SQUARE_SIDE_LENGTH;\n  }\n\n  draw() {\n    CONTEXT.beginPath();\n    CONTEXT.fillStyle = this.fillStyle;\n    CONTEXT.fillRect(this.point.x, this.point.y, this.sideLength, this.sideLength);\n  }\n\n  drawPoint() {\n    CONTEXT.beginPath();\n    CONTEXT.strokeStyle = 'red';\n    CONTEXT.arc(this.point.x, this.point.y, 10, 0, 2 * Math.PI);\n    CONTEXT.stroke();\n  }\n\n  drawCoordinates() {\n    CONTEXT.fillStyle = 'black'\n    CONTEXT.fillText(`${this.point.x} | ${this.point.y}`, this.point.x, this.point.y);\n  }\n\n  drawEdgePoints() {\n    Square.drawEdgePoint('yellow', this.point.x, this.point.y);\n    Square.drawEdgePoint('blue', this.point.x + SQUARE_SIDE_LENGTH, this.point.y);\n    Square.drawEdgePoint('magenta', this.point.x + SQUARE_SIDE_LENGTH, this.point.y + SQUARE_SIDE_LENGTH);\n    Square.drawEdgePoint('black', this.point.x, this.point.y + SQUARE_SIDE_LENGTH);\n  }\n\n  static drawEdgePoint(color, x, y) {\n    CONTEXT.beginPath();\n    CONTEXT.strokeStyle = color;\n    CONTEXT.arc(x, y, 10, 0, 2 * Math.PI);\n    CONTEXT.stroke();\n  }\n\n  clear() {\n    CONTEXT.clearRect(this.point.x, this.point.y, this.sideLength, this.sideLength);\n  }\n\n  equals(otherSquare) {\n    return otherSquare !== undefined &&\n      otherSquare instanceof Square &&\n      this.sideLength === otherSquare.sideLength &&\n      this.point.equals(otherSquare.point);\n  }\n\n  moveDown() {\n    this.clear();\n    this.point.moveDown();\n    this.draw();\n  }\n\n  clearAndMoveDown() {\n    this.clear();\n    this.point.moveDown();\n  }\n\n  moveLeft() {\n    this.clear();\n    this.point.moveLeft();\n    this.draw();\n  }\n\n  moveRight() {\n    this.clear();\n    this.point.moveRight();\n    this.draw();\n  }\n\n  transformClockwise(x, y) {\n    this.point.transformClockwise(x, y);\n  }\n\n  transformCounterClockwise(x, y) {\n    this.point.transformCounterClockwise(x, y);\n  }\n\n  isBelowLimit(yLimit) {\n    return this.point.y < yLimit;\n  }\n}\n","import {\n  CONTEXT,\n  SQUARE_SIDE_LENGTH,\n} from './constants.js';\n\nimport Point from './point.js';\nimport Square from './square.js';\n\nclass Shape {\n  init(fillStyle, pointOfTranslation, points) {\n    this.pointOfTranslation = pointOfTranslation;\n\n    const pointOfTranslationSquare = new Square(pointOfTranslation, fillStyle);\n    const otherSquares = points.map(point => new Square(point, fillStyle));\n\n    this.squares = [pointOfTranslationSquare, ...otherSquares];\n\n    this.largestY = this.calculateLargestY();\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n  }\n\n  getPointOfTranslationX() {\n    return this.getPointOfTranslationX;\n  }\n\n  remove(squareToRemove) {\n    if (squareToRemove.hasOwnProperty('point')\n      && squareToRemove.point.hasOwnProperty('x') && squareToRemove.point.hasOwnProperty('y')) {\n      this.squares = this.squares.filter(square => !(square.equals(squareToRemove)));\n      this.largestY = this.calculateLargestY();\n      this.smallestX = this.calculateSmallestX();\n      this.largestX = this.calculateLargestX();\n    }\n  }\n\n  draw() {\n    this.squares.forEach(square => square.draw());\n  }\n\n  drawPoints() {\n    this.squares.forEach(square => square.drawPoint());\n  }\n\n  drawCoordinates() {\n    this.squares.forEach((square) => square.drawCoordinates());\n  }\n\n  markPointOfTranslation() {\n    CONTEXT.fillStyle = 'rgba(120, 230, 244, 0.2)';\n\n    CONTEXT.beginPath();\n    CONTEXT.arc(this.pointOfTranslation.x, this.pointOfTranslation.y, 10, 0, 2 * Math.PI);\n    CONTEXT.stroke();\n  }\n\n  drawEdgePoints() {\n    this.squares.forEach(square => {\n      square.drawEdgePoints();\n    });\n  }\n\n  clear() {\n    this.squares.forEach(square => square.clear());\n  }\n\n  rotateClockwise() {\n    this.squares.forEach(square => {\n      square.transformClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y);\n    });\n    this.largestY = this.calculateLargestY();\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n  }\n\n  rotateCounterClockwise() {\n    this.squares.forEach(square => {\n      square.transformCounterClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y);\n    });\n    this.largestY = this.calculateLargestY();\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n  }\n\n  hasPoint(otherPoint) {\n    const points = this.squares.map(square => new Point(square.point.x, square.point.y));\n    const thisPoint = points.filter(point => point.equals(otherPoint));\n    return thisPoint !== undefined && thisPoint.length && thisPoint.length !== 0 && thisPoint.equals(otherPoint);\n  }\n\n  hasCommonPointWith(otherShape) {\n    for (const square of this.squares) {\n      for (const otherSquare of otherShape.squares) {\n        if (square.equals(otherSquare)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveDown() {\n    this.clear();\n    this.squares.forEach(square => square.moveDown());\n    this.largestY = this.calculateLargestY();\n    this.draw();\n  }\n\n  moveLeft() {\n    this.clear();\n    this.squares.forEach(square => square.moveLeft());\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n    this.draw();\n  }\n\n  moveRight() {\n    this.clear();\n    this.squares.forEach(square => square.moveRight());\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n    this.draw();\n  }\n\n  calculateLargestY() {\n    return this.squares\n      .map(square => square.point.y)\n      .sort()\n      .pop();\n  }\n\n  calculateSmallestX() {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .shift();\n  }\n\n  calculateLargestX() {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .pop();\n  }\n\n  getLargestY() {\n    return this.largestY;\n  }\n\n  getSmallestX() {\n    return this.smallestX;\n  }\n\n  getLargestX() {\n    return this.largestX;\n  }\n\n  clearAndMoveSquaresBelowYLimit(yLimit) {\n    let redraw = false;\n    this.squares.forEach(square => {\n      if (square.isBelowLimit(yLimit)) {\n        square.clearAndMoveDown();\n        redraw = true;\n      }\n    })\n    return redraw;\n  }\n}\n\nclass O extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const point3 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'thistle';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateClockwise() { }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateCounterClockwise() { }\n}\n\nclass T extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH);\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const point3 = new Point(xCoordOfAppearance, 0);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'lightgrey';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n}\n\nclass I extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0);\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'yellowgreen';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n}\n\nclass S extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'khaki';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n}\n\nclass Z extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH);\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'tan';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n}\n\nclass L extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0);\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'lightblue';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n}\n\nclass J extends Shape {\n  constructor(xCoordOfAppearance) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0);\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0);\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'darksalmon';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints);\n  }\n}\n\nconst shapeTypes = {\n  I,\n  O,\n  L,\n  J,\n  S,\n  Z,\n  T\n};\n\nexport default shapeTypes;\n","import {\n  CANVAS,\n  CONTEXT,\n  SQUARE_SIDE_LENGTH,\n} from './constants.js';\n\nexport default class Grid {\n  constructor() {\n    this.shapes = [];\n    this.movingShape = undefined;\n  }\n\n  moveShapeDown() {\n    if (this.thereIsRoomToMoveDown()) {\n      this.movingShape.moveDown();\n    }\n  }\n\n  moveShapeLeft() {\n    if (this.thereIsRoomToMoveLeft()) {\n      this.movingShape.moveLeft();\n    }\n  }\n\n  moveShapeRight() {\n    if (this.thereIsRoomToMoveRight()) {\n      this.movingShape.moveRight();\n    }\n  }\n\n  moveShapeToBottom() {\n    while (this.thereIsRoomToMoveDown()) {\n      this.moveShapeDown();\n    }\n  }\n\n  noOtherShapeIsInTheWayDown() {\n    const points = this.movingShape.squares.map(square => square.point);\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point);\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x == point.x &&\n              otherPoint.y == point.y + SQUARE_SIDE_LENGTH)\n          );\n\n        if (commonPoints.length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  noOtherShapeIsInTheWayLeft() {\n    const points = this.movingShape.squares.map(square => square.point);\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point);\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x + SQUARE_SIDE_LENGTH == point.x &&\n              otherPoint.y == point.y)\n          );\n\n        if (commonPoints.length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  noOtherShapeIsInTheWayRight() {\n    const points = this.movingShape.squares.map(square => square.point);\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point);\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x == point.x + SQUARE_SIDE_LENGTH &&\n              otherPoint.y == point.y)\n          );\n\n        if (commonPoints.length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  rotateShape() {\n    this.movingShape.clear();\n    this.movingShape.rotateClockwise();\n\n    if (!(this.allPointsFitInsideGrid() && this.noOtherShapeIsInTheWay(this.movingShape))) {\n      this.movingShape.rotateCounterClockwise();\n    }\n\n    this.movingShape.draw();\n  }\n\n  allPointsFitInsideGrid() {\n    return this.movingShape.squares.map(square => square.point.x)\n      .every(x => x >= 0 && x <= CANVAS.width - SQUARE_SIDE_LENGTH)\n      && this.movingShape.squares.map(square => square.point.y)\n        .every(y => y >= 0 && y <= CANVAS.height - SQUARE_SIDE_LENGTH);\n  }\n\n  thereIsRoomToMoveDown() {\n    const largestY = this.movingShape.getLargestY();\n    return (largestY + SQUARE_SIDE_LENGTH < CANVAS.height) && this.noOtherShapeIsInTheWayDown();\n  }\n\n  thereIsRoomToMoveLeft() {\n    return this.movingShape.getSmallestX() - SQUARE_SIDE_LENGTH >= 0 && this.noOtherShapeIsInTheWayLeft();\n  }\n\n  thereIsRoomToMoveRight() {\n    return this.movingShape.getLargestX() + SQUARE_SIDE_LENGTH < CANVAS.width && this.noOtherShapeIsInTheWayRight();\n  }\n\n  removeFullRows() {\n    const amountOfPointsInRow = CANVAS.width / SQUARE_SIDE_LENGTH;\n    const rowCount = CANVAS.height / SQUARE_SIDE_LENGTH;\n    let fullRowCount = 0;\n\n    for (let i = 0; i < rowCount; i += 1) {\n      const occupiedSquaresAndShapes = new Map();\n      for (const shape of this.shapes) {\n        for (const square of shape.squares) {\n          if (square.point.y === i * SQUARE_SIDE_LENGTH) {\n            occupiedSquaresAndShapes.set(square, shape);\n          }\n        }\n      }\n\n      if (occupiedSquaresAndShapes.size === amountOfPointsInRow) {\n        fullRowCount += 1;\n        for (const [square, shape] of occupiedSquaresAndShapes) {\n          square.clear();\n          shape.remove(square);\n        }\n        this.shiftDownward(i);\n      }\n    }\n    return fullRowCount;\n  }\n\n  shiftDownward(rowIndex) {\n    //  Everything that is above this rowIndex must shift down by SIDE_LENGTH.\n    const yLimit = rowIndex * SQUARE_SIDE_LENGTH;\n    for (const shape of this.shapes) {\n      const redraw = shape.clearAndMoveSquaresBelowYLimit(yLimit);\n      if (redraw) {\n        shape.draw();\n      }\n    }\n  }\n\n  noOtherShapeIsInTheWay(shape) {\n    for (const otherShape of this.shapes) {\n      if (otherShape !== shape) {\n        if (otherShape.hasCommonPointWith(shape)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  drawLines() {\n    const rowCount = CANVAS.height / SQUARE_SIDE_LENGTH;\n    for (let i = 1; i < rowCount; i += 1) {\n      CONTEXT.strokeStyle = 'black';\n      CONTEXT.beginPath();\n      CONTEXT.moveTo(0, i * SQUARE_SIDE_LENGTH);\n      CONTEXT.lineTo(CANVAS.width, i * SQUARE_SIDE_LENGTH);\n      CONTEXT.stroke();\n    }\n  }\n\n  drawAllPoints() {\n    for (const shape of this.shapes) {\n      shape.drawPoints();\n    }\n  }\n\n  drawCoordinates() {\n    for (const shape of this.shapes) {\n      shape.drawCoordinates();\n    }\n  }\n}\n","export default class Score {\n  constructor() {\n    this.high = Score.getHighScore();\n    document.getElementById('high-score').innerText = this.high;\n    this.current = 0;\n  }\n\n  static getHighScore() {\n    let highScore = localStorage.getItem('tetris-high');\n    if (highScore === undefined) {\n      highScore = 0;\n    }\n    return highScore;\n  }\n\n  static calculateIncrease (rowsCleared) {\n    const score = (2 ** rowsCleared) + 2\n    return score\n  }\n\n  increment(value) {\n    this.current += value;\n    document.getElementById('current-score').innerText = this.current;\n  }\n\n  get() {\n    return this.current;\n  }\n\n  set(newValue) {\n    this.current = newValue;\n  }\n\n  submit() {\n    if (this.current > this.high) {\n      localStorage.setItem('tetris-high', this.current);\n      document.getElementById('high-score').innerText = this.current;\n    }\n  }\n}\n","export default class Speed {\n  constructor() {\n    this.value = 0;\n    this.delay = 1000;\n  }\n\n  increase() {\n    this.value += 1;\n    this.delay = 1000 - 100 * this.value;\n  }\n\n  increaseIfNecessary(desiredSpeed) {\n    if (desiredSpeed > this.value) {\n      this.increase();\n    }\n    return this.value;\n  }\n}\n","import { CANVAS, SQUARE_SIDE_LENGTH } from './constants.js';\n\nimport shapeTypes from './shape.js';\n\nimport Grid from './grid.js';\nimport Score from './score.js';\nimport Speed from './speed.js';\n\nclass Game {\n  constructor() {\n    this.isPaused = false;\n\n    Game.setCanvasWidth();\n    Game.setCanvasHeight();\n\n    window.setTimeout(() => {\n      document.getElementById('loading').hidden = true;\n      document.getElementById('container').style.display = 'grid';\n    }, 200); // to allow the user some time to spot the loading text\n\n    this.grid = new Grid();\n    const generatedShape = Game.generateShape();\n    this.grid.shapes.push(generatedShape);\n    this.grid.movingShape = generatedShape;\n    generatedShape.draw();\n    this.score = new Score();\n    this.speed = new Speed();\n    document.getElementById('current-speed').innerText = this.speed.value\n    this.SCORE_PER_SPEED_INCREASE = 50;\n    this.MAX_SPEED = 9;\n    this.paused = ((event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'p': this.pause(); break;\n          default: break;\n        }\n      }\n    });\n    this.keyPressed = ((event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'j': this.grid.moveShapeLeft(); break;\n          case 'k': this.grid.rotateShape(); break;\n          case 'l': this.grid.moveShapeRight(); break;\n          case ' ':\n            // to avoid possible side effects with several intervals triggering simultaneously or closely after each other\n            window.clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = undefined;\n            this.grid.moveShapeToBottom();\n\n            if (!this.grid.thereIsRoomToMoveDown()) {\n              this.grid.movingShape = undefined\n              const fullRowCount = this.grid.removeFullRows()\n              if (fullRowCount > 0) {\n                this.requestScoreIncrease(fullRowCount)\n                this.requestSpeedIncrease()\n              }\n              const generatedShape = Game.generateShape();\n              if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n                this.grid.shapes.push(generatedShape);\n                generatedShape.draw();\n                this.grid.movingShape = generatedShape;\n              } else {\n                this.end()\n              }\n            }\n\n            if (this.grid.movingShape && this.heartbeatInterval === undefined) {\n              this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay);\n            }\n            break;\n          case '1': this.grid.drawAllPoints(); break;\n          case '2': this.grid.drawCoordinates(); break;\n          case '3': this.grid.movingShape.drawEdgePoints(); break;\n          case '4': this.grid.drawLines(); break;\n          default: break;\n        }\n      }\n    });\n    this.keyHandler = this.keyPressed.bind(this);\n    window.addEventListener('keypress', this.keyHandler);\n    this.pauseKeyHandler = this.paused.bind(this);\n    window.addEventListener('keypress', this.pauseKeyHandler);\n\n    const self = this;\n    this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay);\n  }\n\n  static setCanvasWidth() {\n    const desiredWidth = 10 * SQUARE_SIDE_LENGTH;\n\n    if (desiredWidth < window.screen.availWidth) {\n      CANVAS.width = desiredWidth;\n    }\n  }\n\n  static setCanvasHeight() {\n    let desiredHeight = window.screen.availHeight;\n\n    if (desiredHeight % 100 !== 0) {\n      desiredHeight -= desiredHeight % 100;\n    }\n\n    desiredHeight -= 100; // To leave room for browser/OS UI toolbars\n\n    if (desiredHeight > 20 * SQUARE_SIDE_LENGTH) {\n      desiredHeight = 20 * SQUARE_SIDE_LENGTH;\n    }\n\n    CANVAS.height = desiredHeight;\n  }\n\n  static generateShape() {\n    const shapeTypesAsArray = Object.values(shapeTypes);\n    const chosenShapeIndex = Math.round(Math.random() * (shapeTypesAsArray.length - 1));\n    const ChosenShapeType = shapeTypesAsArray[chosenShapeIndex];\n    const xCoordinateOfAppearance = CANVAS.width / 2;\n    const shape = new ChosenShapeType(xCoordinateOfAppearance);\n    return shape;\n  }\n\n  heartbeat() {\n    if (!this.grid.thereIsRoomToMoveDown()) {\n      this.grid.movingShape = undefined\n      const fullRowCount = this.grid.removeFullRows()\n      if (fullRowCount > 0) {\n        this.requestScoreIncrease(fullRowCount)\n        this.requestSpeedIncrease()\n      }\n      const generatedShape = Game.generateShape();\n      if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n        this.grid.shapes.push(generatedShape);\n        generatedShape.draw();\n        this.grid.movingShape = generatedShape;\n      } else {\n        this.end()\n      }\n    }\n\n    if (this.grid.movingShape && this.grid.thereIsRoomToMoveDown()) {\n      this.grid.moveShapeDown()\n    }\n  }\n\n  end() {\n    this.score.submit()\n    Game.showGameOverText()\n    window.clearInterval(this.heartbeatInterval)\n    window.removeEventListener('keypress', this.keyHandler)\n    window.removeEventListener('keypress', this.pauseKeyHandler)\n  }\n\n  requestSpeedIncrease() {\n    if (this.speed.value < this.MAX_SPEED) {\n      const currentSpeed = this.speed.value;\n      const desiredSpeed = Math.trunc(this.score.get() / this.SCORE_PER_SPEED_INCREASE)\n      const newSpeed = this.speed.increaseIfNecessary(desiredSpeed)\n\n      if (newSpeed > currentSpeed) {\n        window.clearInterval(this.heartbeatInterval)\n        const self = this\n        this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n        document.getElementById('current-speed').innerText = this.speed.value\n      }\n    }\n  }\n\n  requestScoreIncrease(rowsCleared) {\n    this.score.increment(rowsCleared)\n  }\n\n  pause() {\n    if (this.isPaused) {\n      window.addEventListener('keypress', this.keyHandler);\n      const self = this;\n      this.heartbeatInterval = window.setInterval(() => self.heartbeat(), this.speed.delay);\n    } else {\n      window.clearInterval(this.heartbeatInterval);\n      window.removeEventListener('keypress', this.keyHandler);\n    }\n    this.isPaused = !this.isPaused;\n  }\n\n  static showGameOverText() {\n    document.getElementById('gameOverContainer').hidden = false;\n  }\n}\n\nnew Game(); // eslint-disable-line no-new\n"],"sourceRoot":""}