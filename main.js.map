{"version":3,"sources":["webpack://squarefall/./src/constants.js","webpack://squarefall/./src/point/point.js","webpack://squarefall/./src/square/square.js","webpack://squarefall/./src/shape/shape.js","webpack://squarefall/./src/grid/grid.js","webpack://squarefall/./src/score/score.js","webpack://squarefall/./src/speed/speed.js","webpack://squarefall/./src/game/game.js","webpack://squarefall/./src/bootstrap.js"],"names":["SQUARE_SIDE_LENGTH","Point","x","y","this","oldX","oldY","translate","rotateClockwise","rotateCounterClockwise","offsetX","offsetY","otherPoint","undefined","Square","point","fillStyle","context","sideLength","beginPath","fillRect","strokeStyle","arc","Math","PI","stroke","fillText","drawEdgePoint","color","clearRect","otherSquare","equals","clear","moveDown","draw","moveLeft","moveRight","transformClockwise","transformCounterClockwise","yLimit","Shape","pointOfTranslation","points","pointOfTranslationSquare","otherSquares","map","squares","largestY","calculateLargestY","smallestX","calculateSmallestX","largestX","calculateLargestX","getPointOfTranslationX","squareToRemove","hasOwnProperty","filter","square","forEach","drawPoint","drawCoordinates","drawEdgePoints","thisPoint","length","otherShape","sort","pop","shift","redraw","isBelowLimit","clearAndMoveDown","I","xCoordOfAppearance","super","otherPoints","init","O","point1","point2","point3","L","J","S","Z","T","Grid","canvas","shapes","movingShape","thereIsRoomToMoveDown","thereIsRoomToMoveLeft","thereIsRoomToMoveRight","moveShapeDown","shape","some","allPointsFitInsideGrid","noOtherShapeIsInTheWay","every","width","height","getLargestY","noOtherShapeIsInTheWayDown","getSmallestX","noOtherShapeIsInTheWayLeft","getLargestX","noOtherShapeIsInTheWayRight","amountOfPointsInRow","rowCount","fullRowCount","i","occupiedSquaresAndShapes","Map","set","size","remove","shiftDownward","rowIndex","clearAndMoveSquaresBelowYLimit","hasCommonPointWith","moveTo","lineTo","drawPoints","Score","high","getHighScore","document","getElementById","innerText","current","highScore","localStorage","getItem","rowsCleared","value","newValue","setItem","Speed","delay","desiredSpeed","increase","Game","getContext","setCanvasWidth","setCanvasHeight","window","setTimeout","hidden","style","display","grid","generatedShape","generateShape","push","score","speed","SCORE_PER_SPEED_INCREASE","MAX_SPEED","paused","event","key","pause","keyPressed","moveShapeLeft","rotateShape","moveShapeRight","clearInterval","heartbeatInterval","moveShapeToBottom","removeFullRows","requestScoreIncrease","requestSpeedIncrease","end","setInterval","self","heartbeat","drawAllPoints","drawLines","keyHandler","bind","addEventListener","pauseKeyHandler","isPaused","screen","availWidth","desiredHeight","availHeight","shapeTypesAsArray","Object","values","ChosenShapeType","round","random","submit","showGameOverText","removeEventListener","currentSpeed","trunc","get","increaseIfNecessary","increment","createElement","setAttribute","append"],"mappings":"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","file":"main.js","sourcesContent":["export const SQUARE_SIDE_LENGTH = 50;","import {\n  SQUARE_SIDE_LENGTH,\n} from '../constants.js';\n\nexport default class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  moveDown() {\n    this.y += SQUARE_SIDE_LENGTH;\n  }\n\n  moveLeft() {\n    this.x += -SQUARE_SIDE_LENGTH;\n  }\n\n  moveRight() {\n    this.x += SQUARE_SIDE_LENGTH;\n  }\n\n  transformClockwise(oldX, oldY) {\n    this.translate(-oldX, -oldY);\n    this.rotateClockwise();\n    this.translate(oldX, oldY);\n  }\n\n  transformCounterClockwise(oldX, oldY) {\n    this.translate(-oldX, -oldY);\n    this.rotateCounterClockwise();\n    this.translate(oldX, oldY);\n  }\n\n  translate(offsetX, offsetY) {\n    this.x = this.x + offsetX;\n    this.y = this.y + offsetY;\n  }\n\n  rotateClockwise() {\n    const oldX = this.x;\n    const oldY = this.y;\n\n    /*\n    We are performing a clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    90 degrees = Math.PI / 2 radians\n    Math.sin(Math.PI / 2) = 1\n    Math.cos(Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * 1 = -oldY\n    newY = oldX * 1 + oldY * 0 = oldX\n    */\n\n    this.x = - oldY;\n    this.y = oldX;\n  }\n\n  rotateCounterClockwise() {\n    const oldX = this.x;\n    const oldY = this.y;\n\n    /*\n    We are performing a counter-clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    -90 degrees = 3 * Math.PI / 2 radians\n    Math.sin(3 * Math.PI / 2) = -1\n    Math.cos(3 * Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * -1 = oldY\n    newY = oldX * -1 + oldY * 0 = -oldX\n    */\n\n    this.x = oldY;\n    this.y = -oldX;\n  }\n\n  equals(otherPoint) {\n    return otherPoint !== undefined &&\n      otherPoint instanceof Point &&\n      this.x === otherPoint.x &&\n      this.y === otherPoint.y;\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js';\n\nexport default class Square {\n  constructor(point, fillStyle, context) {\n    // The point of a Square always refers to its top left point\n    this.point = point;\n    this.fillStyle = fillStyle;\n    this.context = context;\n    this.sideLength = SQUARE_SIDE_LENGTH;\n  }\n\n  draw() {\n    this.context.beginPath();\n    this.context.fillStyle = this.fillStyle;\n    this.context.fillRect(this.point.x, this.point.y, this.sideLength, this.sideLength);\n  }\n\n  drawPoint() {\n    this.context.beginPath();\n    this.context.strokeStyle = 'red';\n    this.context.arc(this.point.x, this.point.y, 10, 0, 2 * Math.PI);\n    this.context.stroke();\n  }\n\n  drawCoordinates() {\n    this.context.fillStyle = 'black'\n    this.context.fillText(`${this.point.x} | ${this.point.y}`, this.point.x, this.point.y);\n  }\n\n  drawEdgePoints() {\n    this.drawEdgePoint('yellow', this.point.x, this.point.y);\n    this.drawEdgePoint('blue', this.point.x + SQUARE_SIDE_LENGTH, this.point.y);\n    this.drawEdgePoint('magenta', this.point.x + SQUARE_SIDE_LENGTH, this.point.y + SQUARE_SIDE_LENGTH);\n    this.drawEdgePoint('black', this.point.x, this.point.y + SQUARE_SIDE_LENGTH);\n  }\n\n  drawEdgePoint(color, x, y) {\n    this.context.beginPath();\n    this.context.strokeStyle = color;\n    this.context.arc(x, y, 10, 0, 2 * Math.PI);\n    this.context.stroke();\n  }\n\n  clear() {\n    this.context.clearRect(this.point.x, this.point.y, this.sideLength, this.sideLength);\n  }\n\n  equals(otherSquare) {\n    return otherSquare !== undefined &&\n      otherSquare instanceof Square &&\n      this.sideLength === otherSquare.sideLength &&\n      this.point.equals(otherSquare.point);\n  }\n\n  moveDown() {\n    this.clear();\n    this.point.moveDown();\n    this.draw();\n  }\n\n  clearAndMoveDown() {\n    this.clear();\n    this.point.moveDown();\n  }\n\n  moveLeft() {\n    this.clear();\n    this.point.moveLeft();\n    this.draw();\n  }\n\n  moveRight() {\n    this.clear();\n    this.point.moveRight();\n    this.draw();\n  }\n\n  transformClockwise(x, y) {\n    this.point.transformClockwise(x, y);\n  }\n\n  transformCounterClockwise(x, y) {\n    this.point.transformCounterClockwise(x, y);\n  }\n\n  isBelowLimit(yLimit) {\n    return this.point.y < yLimit;\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js';\n\nimport Point from '../point/point.js';\nimport Square from '../square/square.js';\n\nexport class Shape {\n  init(fillStyle, pointOfTranslation, points, context) {\n    this.pointOfTranslation = pointOfTranslation;\n\n    const pointOfTranslationSquare = new Square(pointOfTranslation, fillStyle, context);\n    const otherSquares = points.map(point => new Square(point, fillStyle, context));\n\n    this.squares = [pointOfTranslationSquare, ...otherSquares];\n\n    this.largestY = this.calculateLargestY();\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n\n    this.context = context;\n  }\n\n  getPointOfTranslationX() {\n    return this.getPointOfTranslationX;\n  }\n\n  remove(squareToRemove) {\n    if (squareToRemove.hasOwnProperty('point')\n      && squareToRemove.point.hasOwnProperty('x') && squareToRemove.point.hasOwnProperty('y')) {\n      this.squares = this.squares.filter(square => !(square.equals(squareToRemove)));\n      this.largestY = this.calculateLargestY();\n      this.smallestX = this.calculateSmallestX();\n      this.largestX = this.calculateLargestX();\n    }\n  }\n\n  draw() {\n    this.squares.forEach(square => square.draw());\n  }\n\n  drawPoints() {\n    this.squares.forEach(square => square.drawPoint());\n  }\n\n  drawCoordinates() {\n    this.squares.forEach((square) => square.drawCoordinates());\n  }\n\n  markPointOfTranslation() {\n    context.fillStyle = 'rgba(120, 230, 244, 0.2)';\n\n    context.beginPath();\n    context.arc(this.pointOfTranslation.x, this.pointOfTranslation.y, 10, 0, 2 * Math.PI);\n    context.stroke();\n  }\n\n  drawEdgePoints() {\n    this.squares.forEach(square => {\n      square.drawEdgePoints();\n    });\n  }\n\n  clear() {\n    this.squares.forEach(square => square.clear());\n  }\n\n  rotateClockwise() {\n    this.squares.forEach(square => {\n      square.transformClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y);\n    });\n    this.largestY = this.calculateLargestY();\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n  }\n\n  rotateCounterClockwise() {\n    this.squares.forEach(square => {\n      square.transformCounterClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y);\n    });\n    this.largestY = this.calculateLargestY();\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n  }\n\n  hasPoint(otherPoint) {\n    const points = this.squares.map(square => new Point(square.point.x, square.point.y));\n    const thisPoint = points.filter(point => point.equals(otherPoint));\n    return thisPoint !== undefined && thisPoint.length && thisPoint.length !== 0 && thisPoint.equals(otherPoint);\n  }\n\n  hasCommonPointWith(otherShape) {\n    for (const square of this.squares) {\n      for (const otherSquare of otherShape.squares) {\n        if (square.equals(otherSquare)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveDown() {\n    this.clear();\n    this.squares.forEach(square => square.moveDown());\n    this.largestY = this.calculateLargestY();\n    this.draw();\n  }\n\n  moveLeft() {\n    this.clear();\n    this.squares.forEach(square => square.moveLeft());\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n    this.draw();\n  }\n\n  moveRight() {\n    this.clear();\n    this.squares.forEach(square => square.moveRight());\n    this.smallestX = this.calculateSmallestX();\n    this.largestX = this.calculateLargestX();\n    this.draw();\n  }\n\n  calculateLargestY() {\n    return this.squares\n      .map(square => square.point.y)\n      .sort()\n      .pop();\n  }\n\n  calculateSmallestX() {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .shift();\n  }\n\n  calculateLargestX() {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .pop();\n  }\n\n  getLargestY() {\n    return this.largestY;\n  }\n\n  getSmallestX() {\n    return this.smallestX;\n  }\n\n  getLargestX() {\n    return this.largestX;\n  }\n\n  clearAndMoveSquaresBelowYLimit(yLimit) {\n    let redraw = false;\n    this.squares.forEach(square => {\n      if (square.isBelowLimit(yLimit)) {\n        square.clearAndMoveDown();\n        redraw = true;\n      }\n    })\n    return redraw;\n  }\n}\n\nclass O extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const point3 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'thistle';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateClockwise() { }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateCounterClockwise() { }\n}\n\nclass T extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH);\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const point3 = new Point(xCoordOfAppearance, 0);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'lightgrey';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n}\n\nclass I extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0);\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'yellowgreen';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n}\n\nclass S extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'khaki';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n}\n\nclass Z extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH);\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'tan';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n}\n\nclass L extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0);\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const point2 = new Point(xCoordOfAppearance, 0);\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'lightblue';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n}\n\nclass J extends Shape {\n  constructor(xCoordOfAppearance, context) {\n    super();\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0);\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0);\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0);\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH);\n\n    const otherPoints = [point1, point2, point3];\n\n    const fillStyle = 'darksalmon';\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context);\n  }\n}\n\nconst shapeTypes = {\n  I,\n  O,\n  L,\n  J,\n  S,\n  Z,\n  T\n};\n\nexport default shapeTypes;\n","import {\n  SQUARE_SIDE_LENGTH,\n} from '../constants.js';\n\nexport default class Grid {\n  constructor(canvas, context) {\n    this.canvas = canvas;\n    this.context = context;\n    this.shapes = [];\n    this.movingShape = undefined;\n  }\n\n  moveShapeDown() {\n    if (this.thereIsRoomToMoveDown()) {\n      this.movingShape.moveDown();\n    }\n  }\n\n  moveShapeLeft() {\n    if (this.thereIsRoomToMoveLeft()) {\n      this.movingShape.moveLeft();\n    }\n  }\n\n  moveShapeRight() {\n    if (this.thereIsRoomToMoveRight()) {\n      this.movingShape.moveRight();\n    }\n  }\n\n  moveShapeToBottom() {\n    while (this.thereIsRoomToMoveDown()) {\n      this.moveShapeDown();\n    }\n  }\n\n  noOtherShapeIsInTheWayDown() {\n    const points = this.movingShape.squares.map(square => square.point);\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point);\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x == point.x &&\n              otherPoint.y == point.y + SQUARE_SIDE_LENGTH)\n          );\n\n        if (commonPoints.length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  noOtherShapeIsInTheWayLeft() {\n    const points = this.movingShape.squares.map(square => square.point);\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point);\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x + SQUARE_SIDE_LENGTH == point.x &&\n              otherPoint.y == point.y)\n          );\n\n        if (commonPoints.length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  noOtherShapeIsInTheWayRight() {\n    const points = this.movingShape.squares.map(square => square.point);\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point);\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x == point.x + SQUARE_SIDE_LENGTH &&\n              otherPoint.y == point.y)\n          );\n\n        if (commonPoints.length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  rotateShape() {\n    this.movingShape.clear();\n    this.movingShape.rotateClockwise();\n\n    if (!(this.allPointsFitInsideGrid() && this.noOtherShapeIsInTheWay(this.movingShape))) {\n      this.movingShape.rotateCounterClockwise();\n    }\n\n    this.movingShape.draw();\n  }\n\n  allPointsFitInsideGrid() {\n    return this.movingShape.squares.map(square => square.point.x)\n      .every(x => x >= 0 && x <= this.canvas.width - SQUARE_SIDE_LENGTH)\n      && this.movingShape.squares.map(square => square.point.y)\n        .every(y => y >= 0 && y <= this.canvas.height - SQUARE_SIDE_LENGTH);\n  }\n\n  thereIsRoomToMoveDown() {\n    const largestY = this.movingShape.getLargestY();\n    return (largestY + SQUARE_SIDE_LENGTH < this.canvas.height) && this.noOtherShapeIsInTheWayDown();\n  }\n\n  thereIsRoomToMoveLeft() {\n    return this.movingShape.getSmallestX() - SQUARE_SIDE_LENGTH >= 0 && this.noOtherShapeIsInTheWayLeft();\n  }\n\n  thereIsRoomToMoveRight() {\n    return this.movingShape.getLargestX() + SQUARE_SIDE_LENGTH < this.canvas.width && this.noOtherShapeIsInTheWayRight();\n  }\n\n  removeFullRows() {\n    const amountOfPointsInRow = this.canvas.width / SQUARE_SIDE_LENGTH;\n    const rowCount = this.canvas.height / SQUARE_SIDE_LENGTH;\n    let fullRowCount = 0;\n\n    for (let i = 0; i < rowCount; i += 1) {\n      const occupiedSquaresAndShapes = new Map();\n      for (const shape of this.shapes) {\n        for (const square of shape.squares) {\n          if (square.point.y === i * SQUARE_SIDE_LENGTH) {\n            occupiedSquaresAndShapes.set(square, shape);\n          }\n        }\n      }\n\n      if (occupiedSquaresAndShapes.size === amountOfPointsInRow) {\n        fullRowCount += 1;\n        for (const [square, shape] of occupiedSquaresAndShapes) {\n          square.clear();\n          shape.remove(square);\n        }\n        this.shiftDownward(i);\n      }\n    }\n    return fullRowCount;\n  }\n\n  shiftDownward(rowIndex) {\n    //  Everything that is above this rowIndex must shift down by SIDE_LENGTH.\n    const yLimit = rowIndex * SQUARE_SIDE_LENGTH;\n    for (const shape of this.shapes) {\n      const redraw = shape.clearAndMoveSquaresBelowYLimit(yLimit);\n      if (redraw) {\n        shape.draw();\n      }\n    }\n  }\n\n  noOtherShapeIsInTheWay(shape) {\n    for (const otherShape of this.shapes) {\n      if (otherShape !== shape) {\n        if (otherShape.hasCommonPointWith(shape)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  drawLines() {\n    const rowCount = this.canvas.height / SQUARE_SIDE_LENGTH;\n    for (let i = 1; i < rowCount; i += 1) {\n      this.context.strokeStyle = 'black';\n      this.context.beginPath();\n      this.context.moveTo(0, i * SQUARE_SIDE_LENGTH);\n      this.context.lineTo(this.canvas.width, i * SQUARE_SIDE_LENGTH);\n      this.context.stroke();\n    }\n  }\n\n  drawAllPoints() {\n    for (const shape of this.shapes) {\n      shape.drawPoints();\n    }\n  }\n\n  drawCoordinates() {\n    for (const shape of this.shapes) {\n      shape.drawCoordinates();\n    }\n  }\n}\n","export default class Score {\n  constructor() {\n    this.high = Score.getHighScore();\n    document.getElementById('high-score').innerText = this.high;\n    this.current = 0;\n  }\n\n  static getHighScore() {\n    let highScore = localStorage.getItem('tetris-high');\n    if (highScore === undefined) {\n      highScore = 0;\n    }\n    return highScore;\n  }\n\n  static calculateIncrease (rowsCleared) {\n    const score = (2 ** rowsCleared) + 2\n    return score\n  }\n\n  increment(value) {\n    this.current += value;\n    document.getElementById('current-score').innerText = this.current;\n  }\n\n  get() {\n    return this.current;\n  }\n\n  set(newValue) {\n    this.current = newValue;\n  }\n\n  submit() {\n    if (this.current > this.high) {\n      localStorage.setItem('tetris-high', this.current);\n      document.getElementById('high-score').innerText = this.current;\n    }\n  }\n}\n","export default class Speed {\n  constructor() {\n    this.value = 0;\n    this.delay = 1000;\n  }\n\n  increase() {\n    this.value += 1;\n    this.delay = 1000 - 100 * this.value;\n  }\n\n  increaseIfNecessary(desiredSpeed) {\n    if (desiredSpeed > this.value) {\n      this.increase();\n    }\n    return this.value;\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js';\n\nimport shapeTypes from '../shape/shape.js';\n\nimport Grid from '../grid/grid.js';\nimport Score from '../score/score.js';\nimport Speed from '../speed/speed.js';\n\nexport class Game {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('2d');\n  }\n\n  init() {\n    this.setCanvasWidth();\n    this.setCanvasHeight();\n\n    window.setTimeout(() => {\n      document.getElementById('loading').hidden = true;\n      document.getElementById('container').style.display = 'grid';\n    }, 200); // to allow the user some time to spot the loading text\n\n    this.grid = new Grid(this.canvas, this.context);\n    const generatedShape = this.generateShape();\n    this.grid.shapes.push(generatedShape);\n    this.grid.movingShape = generatedShape;\n    generatedShape.draw();\n    this.score = new Score();\n    this.speed = new Speed();\n    document.getElementById('current-speed').innerText = this.speed.value\n    this.SCORE_PER_SPEED_INCREASE = 50;\n    this.MAX_SPEED = 9;\n    this.paused = ((event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'p': this.pause(); break;\n          default: break;\n        }\n      }\n    });\n    this.keyPressed = ((event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'j': this.grid.moveShapeLeft(); break;\n          case 'k': this.grid.rotateShape(); break;\n          case 'l': this.grid.moveShapeRight(); break;\n          case ' ':\n            // to avoid possible side effects with several intervals triggering simultaneously or closely after each other\n            window.clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = undefined;\n            this.grid.moveShapeToBottom();\n\n            if (!this.grid.thereIsRoomToMoveDown()) {\n              this.grid.movingShape = undefined\n              const fullRowCount = this.grid.removeFullRows()\n              if (fullRowCount > 0) {\n                this.requestScoreIncrease(fullRowCount)\n                this.requestSpeedIncrease()\n              }\n              const generatedShape = this.generateShape();\n              if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n                this.grid.shapes.push(generatedShape);\n                generatedShape.draw();\n                this.grid.movingShape = generatedShape;\n              } else {\n                this.end()\n              }\n            }\n\n            if (this.grid.movingShape && this.heartbeatInterval === undefined) {\n              this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay);\n            }\n            break;\n          case '1': this.grid.drawAllPoints(); break;\n          case '2': this.grid.drawCoordinates(); break;\n          case '3': this.grid.movingShape.drawEdgePoints(); break;\n          case '4': this.grid.drawLines(); break;\n          default: break;\n        }\n      }\n    });\n    this.keyHandler = this.keyPressed.bind(this);\n    window.addEventListener('keypress', this.keyHandler);\n    this.pauseKeyHandler = this.paused.bind(this);\n    window.addEventListener('keypress', this.pauseKeyHandler);\n\n    const self = this;\n    this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay);\n\n    this.isPaused = false;\n  }\n\n  setCanvasWidth() {\n    const desiredWidth = 10 * SQUARE_SIDE_LENGTH;\n\n    if (desiredWidth < window.screen.availWidth) {\n      this.canvas.width = desiredWidth;\n    }\n  }\n\n  setCanvasHeight() {\n    let desiredHeight = window.screen.availHeight;\n\n    if (desiredHeight % 100 !== 0) {\n      desiredHeight -= desiredHeight % 100;\n    }\n\n    desiredHeight -= 100; // To leave room for browser/OS UI toolbars\n\n    if (desiredHeight > 20 * SQUARE_SIDE_LENGTH) {\n      desiredHeight = 20 * SQUARE_SIDE_LENGTH;\n    }\n\n    this.canvas.height = desiredHeight;\n  }\n\n  generateShape() {\n    const shapeTypesAsArray = Object.values(shapeTypes);\n    const chosenShapeIndex = Math.round(Math.random() * (shapeTypesAsArray.length - 1));\n    const ChosenShapeType = shapeTypesAsArray[chosenShapeIndex];\n    const xCoordinateOfAppearance = this.canvas.width / 2;\n    const shape = new ChosenShapeType(xCoordinateOfAppearance, this.context);\n    return shape;\n  }\n\n  heartbeat() {\n    if (!this.grid.thereIsRoomToMoveDown()) {\n      this.grid.movingShape = undefined\n      const fullRowCount = this.grid.removeFullRows()\n      if (fullRowCount > 0) {\n        this.requestScoreIncrease(fullRowCount)\n        this.requestSpeedIncrease()\n      }\n      const generatedShape = this.generateShape();\n      if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n        this.grid.shapes.push(generatedShape);\n        generatedShape.draw();\n        this.grid.movingShape = generatedShape;\n      } else {\n        this.end()\n      }\n    }\n\n    if (this.grid.movingShape && this.grid.thereIsRoomToMoveDown()) {\n      this.grid.moveShapeDown()\n    }\n  }\n\n  end() {\n    this.score.submit()\n    Game.showGameOverText()\n    window.clearInterval(this.heartbeatInterval)\n    window.removeEventListener('keypress', this.keyHandler)\n    window.removeEventListener('keypress', this.pauseKeyHandler)\n  }\n\n  requestSpeedIncrease() {\n    if (this.speed.value < this.MAX_SPEED) {\n      const currentSpeed = this.speed.value;\n      const desiredSpeed = Math.trunc(this.score.get() / this.SCORE_PER_SPEED_INCREASE)\n      const newSpeed = this.speed.increaseIfNecessary(desiredSpeed)\n\n      if (newSpeed > currentSpeed) {\n        window.clearInterval(this.heartbeatInterval)\n        const self = this\n        this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n        document.getElementById('current-speed').innerText = this.speed.value\n      }\n    }\n  }\n\n  requestScoreIncrease(rowsCleared) {\n    this.score.increment(rowsCleared)\n  }\n\n  pause() {\n    if (this.isPaused) {\n      window.addEventListener('keypress', this.keyHandler);\n      const self = this;\n      this.heartbeatInterval = window.setInterval(() => self.heartbeat(), this.speed.delay);\n    } else {\n      window.clearInterval(this.heartbeatInterval);\n      window.removeEventListener('keypress', this.keyHandler);\n    }\n    this.isPaused = !this.isPaused;\n  }\n\n  static showGameOverText() {\n    document.getElementById('gameOverContainer').hidden = false;\n  }\n}\n","import { Game } from './game/game.js';\n\nconst canvas = document.createElement('canvas');\ncanvas.setAttribute('id', 'gameCanvas');\n\nconst gameContainer = document.getElementById('gameContainer');\ngameContainer.append(canvas);\n\nconst game = new Game(canvas);\ngame.init();"],"sourceRoot":""}