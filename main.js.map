{"version":3,"sources":["webpack://squarefall/./src/constants.js","webpack://squarefall/./src/point/point.js","webpack://squarefall/./src/square/square.js","webpack://squarefall/./src/shape/shape.js","webpack://squarefall/./src/grid/grid.js","webpack://squarefall/./src/score/score.js","webpack://squarefall/./src/speed/speed.js","webpack://squarefall/./src/game/game.js","webpack://squarefall/./src/bootstrap.js"],"names":["SQUARE_SIDE_LENGTH","Point","x","y","this","oldX","oldY","translate","rotateClockwise","rotateCounterClockwise","offsetX","offsetY","otherPoint","Square","point","fillStyle","context","sideLength","beginPath","fillRect","strokeStyle","arc","Math","PI","stroke","fillText","drawEdgePoint","color","clearRect","otherSquare","undefined","equals","clear","moveDown","draw","moveLeft","moveRight","transformClockwise","transformCounterClockwise","yLimit","Shape","pointOfTranslation","points","pointOfTranslationSquare","otherSquares","map","squares","largestY","calculateLargestY","smallestX","calculateSmallestX","largestX","calculateLargestX","getPointOfTranslationX","squareToRemove","Object","prototype","hasOwnProperty","call","filter","square","forEach","drawPoint","drawCoordinates","drawEdgePoints","thisPoint","length","otherShape","sort","pop","shift","redraw","isBelowLimit","clearAndMoveDown","I","xCoordOfAppearance","super","otherPoints","init","O","point1","point2","point3","L","J","S","Z","T","Grid","canvas","shapes","movingShape","thereIsRoomToMoveDown","thereIsRoomToMoveLeft","thereIsRoomToMoveRight","moveShapeDown","shape","some","allPointsFitInsideGrid","noOtherShapeIsInTheWay","every","width","height","getLargestY","noOtherShapeIsInTheWayDown","getSmallestX","noOtherShapeIsInTheWayLeft","getLargestX","noOtherShapeIsInTheWayRight","amountOfPointsInRow","rowCount","fullRowCount","i","occupiedSquaresAndShapes","Map","set","size","remove","shiftDownward","rowIndex","clearAndMoveSquaresBelowYLimit","hasCommonPointWith","moveTo","lineTo","drawPoints","Score","high","getHighScore","document","getElementById","innerText","current","highScore","localStorage","getItem","rowsCleared","value","newValue","setItem","Speed","delay","desiredSpeed","increase","Game","getContext","setCanvasWidth","setCanvasHeight","window","setTimeout","hidden","style","display","grid","generatedShape","generateShape","push","score","speed","SCORE_PER_SPEED_INCREASE","MAX_SPEED","paused","event","key","pause","keyPressed","moveShapeLeft","rotateShape","moveShapeRight","clearInterval","heartbeatInterval","moveShapeToBottom","removeFullRows","requestScoreIncrease","requestSpeedIncrease","end","setInterval","self","heartbeat","drawAllPoints","drawLines","keyHandler","bind","addEventListener","pauseKeyHandler","isPaused","screen","availWidth","desiredHeight","availHeight","shapeTypesAsArray","values","ChosenShapeType","round","random","submit","showGameOverText","removeEventListener","currentSpeed","trunc","get","increaseIfNecessary","increment","createElement","setAttribute","append"],"mappings":"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","file":"main.js","sourcesContent":["export const SQUARE_SIDE_LENGTH = 50\n","import {\n  SQUARE_SIDE_LENGTH\n} from '../constants.js'\n\nexport default class Point {\n  constructor (x, y) {\n    this.x = x\n    this.y = y\n  }\n\n  moveDown () {\n    this.y += SQUARE_SIDE_LENGTH\n  }\n\n  moveLeft () {\n    this.x += -SQUARE_SIDE_LENGTH\n  }\n\n  moveRight () {\n    this.x += SQUARE_SIDE_LENGTH\n  }\n\n  transformClockwise (oldX, oldY) {\n    this.translate(-oldX, -oldY)\n    this.rotateClockwise()\n    this.translate(oldX, oldY)\n  }\n\n  transformCounterClockwise (oldX, oldY) {\n    this.translate(-oldX, -oldY)\n    this.rotateCounterClockwise()\n    this.translate(oldX, oldY)\n  }\n\n  translate (offsetX, offsetY) {\n    this.x = this.x + offsetX\n    this.y = this.y + offsetY\n  }\n\n  rotateClockwise () {\n    const oldX = this.x\n    const oldY = this.y\n\n    /*\n    We are performing a clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    90 degrees = Math.PI / 2 radians\n    Math.sin(Math.PI / 2) = 1\n    Math.cos(Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * 1 = -oldY\n    newY = oldX * 1 + oldY * 0 = oldX\n    */\n\n    this.x = -oldY\n    this.y = oldX\n  }\n\n  rotateCounterClockwise () {\n    const oldX = this.x\n    const oldY = this.y\n\n    /*\n    We are performing a counter-clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    -90 degrees = 3 * Math.PI / 2 radians\n    Math.sin(3 * Math.PI / 2) = -1\n    Math.cos(3 * Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * -1 = oldY\n    newY = oldX * -1 + oldY * 0 = -oldX\n    */\n\n    this.x = oldY\n    this.y = -oldX\n  }\n\n  equals (otherPoint) {\n    return otherPoint instanceof Point &&\n      typeof otherPoint.x === 'number' &&\n      typeof otherPoint.y === 'number' &&\n      this.x === otherPoint.x &&\n      this.y === otherPoint.y\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js'\n\nexport default class Square {\n  constructor (point, fillStyle, context) {\n    // The point of a Square always refers to its top left point\n    this.point = point\n    this.fillStyle = fillStyle\n    this.context = context\n    this.sideLength = SQUARE_SIDE_LENGTH\n  }\n\n  draw () {\n    this.context.beginPath()\n    this.context.fillStyle = this.fillStyle\n    this.context.fillRect(this.point.x, this.point.y, this.sideLength, this.sideLength)\n  }\n\n  drawPoint () {\n    this.context.beginPath()\n    this.context.strokeStyle = 'red'\n    this.context.arc(this.point.x, this.point.y, 10, 0, 2 * Math.PI)\n    this.context.stroke()\n  }\n\n  drawCoordinates () {\n    this.context.fillStyle = 'black'\n    this.context.fillText(`${this.point.x} | ${this.point.y}`, this.point.x, this.point.y)\n  }\n\n  drawEdgePoints () {\n    this.drawEdgePoint('yellow', this.point.x, this.point.y)\n    this.drawEdgePoint('blue', this.point.x + SQUARE_SIDE_LENGTH, this.point.y)\n    this.drawEdgePoint('magenta', this.point.x + SQUARE_SIDE_LENGTH, this.point.y + SQUARE_SIDE_LENGTH)\n    this.drawEdgePoint('black', this.point.x, this.point.y + SQUARE_SIDE_LENGTH)\n  }\n\n  drawEdgePoint (color, x, y) {\n    this.context.beginPath()\n    this.context.strokeStyle = color\n    this.context.arc(x, y, 10, 0, 2 * Math.PI)\n    this.context.stroke()\n  }\n\n  clear () {\n    this.context.clearRect(this.point.x, this.point.y, this.sideLength, this.sideLength)\n  }\n\n  equals (otherSquare) {\n    return otherSquare !== undefined &&\n      otherSquare instanceof Square &&\n      this.sideLength === otherSquare.sideLength &&\n      this.point.equals(otherSquare.point)\n  }\n\n  moveDown () {\n    this.clear()\n    this.point.moveDown()\n    this.draw()\n  }\n\n  clearAndMoveDown () {\n    this.clear()\n    this.point.moveDown()\n  }\n\n  moveLeft () {\n    this.clear()\n    this.point.moveLeft()\n    this.draw()\n  }\n\n  moveRight () {\n    this.clear()\n    this.point.moveRight()\n    this.draw()\n  }\n\n  transformClockwise (x, y) {\n    this.point.transformClockwise(x, y)\n  }\n\n  transformCounterClockwise (x, y) {\n    this.point.transformCounterClockwise(x, y)\n  }\n\n  isBelowLimit (yLimit) {\n    return this.point.y < yLimit\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js'\n\nimport Point from '../point/point.js'\nimport Square from '../square/square.js'\n\nexport class Shape {\n  init (fillStyle, pointOfTranslation, points, context) {\n    this.pointOfTranslation = pointOfTranslation\n\n    const pointOfTranslationSquare = new Square(pointOfTranslation, fillStyle, context)\n    const otherSquares = points.map(point => new Square(point, fillStyle, context))\n\n    this.squares = [pointOfTranslationSquare, ...otherSquares]\n\n    this.largestY = this.calculateLargestY()\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n\n    this.context = context\n  }\n\n  getPointOfTranslationX () {\n    return this.getPointOfTranslationX\n  }\n\n  remove (squareToRemove) {\n    if (Object.prototype.hasOwnProperty.call(squareToRemove, 'point') &&\n      Object.prototype.hasOwnProperty.call(squareToRemove.point, 'x') &&\n      Object.prototype.hasOwnProperty.call(squareToRemove.point, 'y')) {\n      this.squares = this.squares.filter(square => !(square.equals(squareToRemove)))\n      this.largestY = this.calculateLargestY()\n      this.smallestX = this.calculateSmallestX()\n      this.largestX = this.calculateLargestX()\n    }\n  }\n\n  draw () {\n    this.squares.forEach(square => square.draw())\n  }\n\n  drawPoints () {\n    this.squares.forEach(square => square.drawPoint())\n  }\n\n  drawCoordinates () {\n    this.squares.forEach((square) => square.drawCoordinates())\n  }\n\n  markPointOfTranslation () {\n    this.context.fillStyle = 'rgba(120, 230, 244, 0.2)'\n\n    this.context.beginPath()\n    this.context.arc(this.pointOfTranslation.x, this.pointOfTranslation.y, 10, 0, 2 * Math.PI)\n    this.context.stroke()\n  }\n\n  drawEdgePoints () {\n    this.squares.forEach(square => {\n      square.drawEdgePoints()\n    })\n  }\n\n  clear () {\n    this.squares.forEach(square => square.clear())\n  }\n\n  rotateClockwise () {\n    this.squares.forEach(square => {\n      square.transformClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y)\n    })\n    this.largestY = this.calculateLargestY()\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n  }\n\n  rotateCounterClockwise () {\n    this.squares.forEach(square => {\n      square.transformCounterClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y)\n    })\n    this.largestY = this.calculateLargestY()\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n  }\n\n  hasPoint (otherPoint) {\n    const points = this.squares.map(square => new Point(square.point.x, square.point.y))\n    const thisPoint = points.filter(point => point.equals(otherPoint))\n    return thisPoint !== undefined && thisPoint.length && thisPoint.length !== 0 && thisPoint.equals(otherPoint)\n  }\n\n  hasCommonPointWith (otherShape) {\n    for (const square of this.squares) {\n      for (const otherSquare of otherShape.squares) {\n        if (square.equals(otherSquare)) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  moveDown () {\n    this.clear()\n    this.squares.forEach(square => square.moveDown())\n    this.largestY = this.calculateLargestY()\n    this.draw()\n  }\n\n  moveLeft () {\n    this.clear()\n    this.squares.forEach(square => square.moveLeft())\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n    this.draw()\n  }\n\n  moveRight () {\n    this.clear()\n    this.squares.forEach(square => square.moveRight())\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n    this.draw()\n  }\n\n  calculateLargestY () {\n    return this.squares\n      .map(square => square.point.y)\n      .sort()\n      .pop()\n  }\n\n  calculateSmallestX () {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .shift()\n  }\n\n  calculateLargestX () {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .pop()\n  }\n\n  getLargestY () {\n    return this.largestY\n  }\n\n  getSmallestX () {\n    return this.smallestX\n  }\n\n  getLargestX () {\n    return this.largestX\n  }\n\n  clearAndMoveSquaresBelowYLimit (yLimit) {\n    let redraw = false\n    this.squares.forEach(square => {\n      if (square.isBelowLimit(yLimit)) {\n        square.clearAndMoveDown()\n        redraw = true\n      }\n    })\n    return redraw\n  }\n}\n\nclass O extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const point3 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'thistle'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateClockwise () { }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateCounterClockwise () { }\n}\n\nclass T extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH)\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const point3 = new Point(xCoordOfAppearance, 0)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'lightgrey'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass I extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0)\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'yellowgreen'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass S extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'khaki'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass Z extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH)\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'tan'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass L extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0)\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'lightblue'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass J extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0)\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0)\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'darksalmon'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nconst shapeTypes = {\n  I,\n  O,\n  L,\n  J,\n  S,\n  Z,\n  T\n}\n\nexport default shapeTypes\n","import {\n  SQUARE_SIDE_LENGTH\n} from '../constants.js'\n\nexport default class Grid {\n  constructor (canvas, context) {\n    this.canvas = canvas\n    this.context = context\n    this.shapes = []\n    this.movingShape = undefined\n  }\n\n  moveShapeDown () {\n    if (this.thereIsRoomToMoveDown()) {\n      this.movingShape.moveDown()\n    }\n  }\n\n  moveShapeLeft () {\n    if (this.thereIsRoomToMoveLeft()) {\n      this.movingShape.moveLeft()\n    }\n  }\n\n  moveShapeRight () {\n    if (this.thereIsRoomToMoveRight()) {\n      this.movingShape.moveRight()\n    }\n  }\n\n  moveShapeToBottom () {\n    while (this.thereIsRoomToMoveDown()) {\n      this.moveShapeDown()\n    }\n  }\n\n  noOtherShapeIsInTheWayDown () {\n    const points = this.movingShape.squares.map(square => square.point)\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point)\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x === point.x &&\n              otherPoint.y === point.y + SQUARE_SIDE_LENGTH)\n          )\n\n        if (commonPoints.length > 0) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  noOtherShapeIsInTheWayLeft () {\n    const points = this.movingShape.squares.map(square => square.point)\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point)\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x + SQUARE_SIDE_LENGTH === point.x &&\n              otherPoint.y === point.y)\n          )\n\n        if (commonPoints.length > 0) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  noOtherShapeIsInTheWayRight () {\n    const points = this.movingShape.squares.map(square => square.point)\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point)\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x === point.x + SQUARE_SIDE_LENGTH &&\n              otherPoint.y === point.y)\n          )\n\n        if (commonPoints.length > 0) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  rotateShape () {\n    this.movingShape.clear()\n    this.movingShape.rotateClockwise()\n\n    if (!(this.allPointsFitInsideGrid() && this.noOtherShapeIsInTheWay(this.movingShape))) {\n      this.movingShape.rotateCounterClockwise()\n    }\n\n    this.movingShape.draw()\n  }\n\n  allPointsFitInsideGrid () {\n    return this.movingShape.squares.map(square => square.point.x)\n      .every(x => x >= 0 && x <= this.canvas.width - SQUARE_SIDE_LENGTH) &&\n      this.movingShape.squares.map(square => square.point.y)\n        .every(y => y >= 0 && y <= this.canvas.height - SQUARE_SIDE_LENGTH)\n  }\n\n  thereIsRoomToMoveDown () {\n    const largestY = this.movingShape.getLargestY()\n    return (largestY + SQUARE_SIDE_LENGTH < this.canvas.height) && this.noOtherShapeIsInTheWayDown()\n  }\n\n  thereIsRoomToMoveLeft () {\n    return this.movingShape.getSmallestX() - SQUARE_SIDE_LENGTH >= 0 && this.noOtherShapeIsInTheWayLeft()\n  }\n\n  thereIsRoomToMoveRight () {\n    return this.movingShape.getLargestX() + SQUARE_SIDE_LENGTH < this.canvas.width && this.noOtherShapeIsInTheWayRight()\n  }\n\n  removeFullRows () {\n    const amountOfPointsInRow = this.canvas.width / SQUARE_SIDE_LENGTH\n    const rowCount = this.canvas.height / SQUARE_SIDE_LENGTH\n    let fullRowCount = 0\n\n    for (let i = 0; i < rowCount; i += 1) {\n      const occupiedSquaresAndShapes = new Map()\n      for (const shape of this.shapes) {\n        for (const square of shape.squares) {\n          if (square.point.y === i * SQUARE_SIDE_LENGTH) {\n            occupiedSquaresAndShapes.set(square, shape)\n          }\n        }\n      }\n\n      if (occupiedSquaresAndShapes.size === amountOfPointsInRow) {\n        fullRowCount += 1\n        for (const [square, shape] of occupiedSquaresAndShapes) {\n          square.clear()\n          shape.remove(square)\n        }\n        this.shiftDownward(i)\n      }\n    }\n    return fullRowCount\n  }\n\n  shiftDownward (rowIndex) {\n    //  Everything that is above this rowIndex must shift down by SIDE_LENGTH.\n    const yLimit = rowIndex * SQUARE_SIDE_LENGTH\n    for (const shape of this.shapes) {\n      const redraw = shape.clearAndMoveSquaresBelowYLimit(yLimit)\n      if (redraw) {\n        shape.draw()\n      }\n    }\n  }\n\n  noOtherShapeIsInTheWay (shape) {\n    for (const otherShape of this.shapes) {\n      if (otherShape !== shape) {\n        if (otherShape.hasCommonPointWith(shape)) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  drawLines () {\n    const rowCount = this.canvas.height / SQUARE_SIDE_LENGTH\n    for (let i = 1; i < rowCount; i += 1) {\n      this.context.strokeStyle = 'black'\n      this.context.beginPath()\n      this.context.moveTo(0, i * SQUARE_SIDE_LENGTH)\n      this.context.lineTo(this.canvas.width, i * SQUARE_SIDE_LENGTH)\n      this.context.stroke()\n    }\n  }\n\n  drawAllPoints () {\n    for (const shape of this.shapes) {\n      shape.drawPoints()\n    }\n  }\n\n  drawCoordinates () {\n    for (const shape of this.shapes) {\n      shape.drawCoordinates()\n    }\n  }\n}\n","export default class Score {\n  constructor () {\n    this.high = Score.getHighScore()\n    document.getElementById('high-score').innerText = this.high\n    this.current = 0\n  }\n\n  static getHighScore () {\n    let highScore = localStorage.getItem('tetris-high')\n    if (highScore === undefined) {\n      highScore = 0\n    }\n    return highScore\n  }\n\n  static calculateIncrease (rowsCleared) {\n    const score = (2 ** rowsCleared) + 2\n    return score\n  }\n\n  increment (value) {\n    this.current += value\n    document.getElementById('current-score').innerText = this.current\n  }\n\n  get () {\n    return this.current\n  }\n\n  set (newValue) {\n    this.current = newValue\n  }\n\n  submit () {\n    if (this.current > this.high) {\n      localStorage.setItem('tetris-high', this.current)\n      document.getElementById('high-score').innerText = this.current\n    }\n  }\n}\n","export default class Speed {\n  constructor () {\n    this.value = 0\n    this.delay = 1000\n  }\n\n  increase () {\n    this.value += 1\n    this.delay = 1000 - 100 * this.value\n  }\n\n  increaseIfNecessary (desiredSpeed) {\n    if (desiredSpeed > this.value) {\n      this.increase()\n    }\n    return this.value\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js'\n\nimport shapeTypes from '../shape/shape.js'\n\nimport Grid from '../grid/grid.js'\nimport Score from '../score/score.js'\nimport Speed from '../speed/speed.js'\n\nexport class Game {\n  constructor (canvas) {\n    this.canvas = canvas\n    this.context = this.canvas.getContext('2d')\n  }\n\n  init () {\n    this.setCanvasWidth()\n    this.setCanvasHeight()\n\n    window.setTimeout(() => {\n      document.getElementById('loading').hidden = true\n      document.getElementById('container').style.display = 'grid'\n    }, 200) // to allow the user some time to spot the loading text\n\n    this.grid = new Grid(this.canvas, this.context)\n    const generatedShape = this.generateShape()\n    this.grid.shapes.push(generatedShape)\n    this.grid.movingShape = generatedShape\n    generatedShape.draw()\n    this.score = new Score()\n    this.speed = new Speed()\n    document.getElementById('current-speed').innerText = this.speed.value\n    this.SCORE_PER_SPEED_INCREASE = 50\n    this.MAX_SPEED = 9\n    this.paused = (event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'p': this.pause(); break\n          default: break\n        }\n      }\n    }\n    this.keyPressed = (event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'j': this.grid.moveShapeLeft(); break\n          case 'k': this.grid.rotateShape(); break\n          case 'l': this.grid.moveShapeRight(); break\n          case ' ':\n            // to avoid possible side effects with several intervals triggering simultaneously or closely after each other\n            window.clearInterval(this.heartbeatInterval)\n            this.heartbeatInterval = undefined\n            this.grid.moveShapeToBottom()\n\n            if (!this.grid.thereIsRoomToMoveDown()) {\n              this.grid.movingShape = undefined\n              const fullRowCount = this.grid.removeFullRows()\n              if (fullRowCount > 0) {\n                this.requestScoreIncrease(fullRowCount)\n                this.requestSpeedIncrease()\n              }\n              const generatedShape = this.generateShape()\n              if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n                this.grid.shapes.push(generatedShape)\n                generatedShape.draw()\n                this.grid.movingShape = generatedShape\n              } else {\n                this.end()\n              }\n            }\n\n            if (this.grid.movingShape && this.heartbeatInterval === undefined) {\n              this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n            }\n            break\n          case '1': this.grid.drawAllPoints(); break\n          case '2': this.grid.drawCoordinates(); break\n          case '3': this.grid.movingShape.drawEdgePoints(); break\n          case '4': this.grid.drawLines(); break\n          default: break\n        }\n      }\n    }\n    this.keyHandler = this.keyPressed.bind(this)\n    window.addEventListener('keypress', this.keyHandler)\n    this.pauseKeyHandler = this.paused.bind(this)\n    window.addEventListener('keypress', this.pauseKeyHandler)\n\n    const self = this\n    this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n\n    this.isPaused = false\n  }\n\n  setCanvasWidth () {\n    const desiredWidth = 10 * SQUARE_SIDE_LENGTH\n\n    if (desiredWidth < window.screen.availWidth) {\n      this.canvas.width = desiredWidth\n    }\n  }\n\n  setCanvasHeight () {\n    let desiredHeight = window.screen.availHeight\n\n    if (desiredHeight % 100 !== 0) {\n      desiredHeight -= desiredHeight % 100\n    }\n\n    desiredHeight -= 100 // To leave room for browser/OS UI toolbars\n\n    if (desiredHeight > 20 * SQUARE_SIDE_LENGTH) {\n      desiredHeight = 20 * SQUARE_SIDE_LENGTH\n    }\n\n    this.canvas.height = desiredHeight\n  }\n\n  generateShape () {\n    const shapeTypesAsArray = Object.values(shapeTypes)\n    const chosenShapeIndex = Math.round(Math.random() * (shapeTypesAsArray.length - 1))\n    const ChosenShapeType = shapeTypesAsArray[chosenShapeIndex]\n    const xCoordinateOfAppearance = this.canvas.width / 2\n    const shape = new ChosenShapeType(xCoordinateOfAppearance, this.context)\n    return shape\n  }\n\n  heartbeat () {\n    if (!this.grid.thereIsRoomToMoveDown()) {\n      this.grid.movingShape = undefined\n      const fullRowCount = this.grid.removeFullRows()\n      if (fullRowCount > 0) {\n        this.requestScoreIncrease(fullRowCount)\n        this.requestSpeedIncrease()\n      }\n      const generatedShape = this.generateShape()\n      if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n        this.grid.shapes.push(generatedShape)\n        generatedShape.draw()\n        this.grid.movingShape = generatedShape\n      } else {\n        this.end()\n      }\n    }\n\n    if (this.grid.movingShape && this.grid.thereIsRoomToMoveDown()) {\n      this.grid.moveShapeDown()\n    }\n  }\n\n  end () {\n    this.score.submit()\n    Game.showGameOverText()\n    window.clearInterval(this.heartbeatInterval)\n    window.removeEventListener('keypress', this.keyHandler)\n    window.removeEventListener('keypress', this.pauseKeyHandler)\n  }\n\n  requestSpeedIncrease () {\n    if (this.speed.value < this.MAX_SPEED) {\n      const currentSpeed = this.speed.value\n      const desiredSpeed = Math.trunc(this.score.get() / this.SCORE_PER_SPEED_INCREASE)\n      const newSpeed = this.speed.increaseIfNecessary(desiredSpeed)\n\n      if (newSpeed > currentSpeed) {\n        window.clearInterval(this.heartbeatInterval)\n        const self = this\n        this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n        document.getElementById('current-speed').innerText = this.speed.value\n      }\n    }\n  }\n\n  requestScoreIncrease (rowsCleared) {\n    this.score.increment(rowsCleared)\n  }\n\n  pause () {\n    if (this.isPaused) {\n      window.addEventListener('keypress', this.keyHandler)\n      const self = this\n      this.heartbeatInterval = window.setInterval(() => self.heartbeat(), this.speed.delay)\n    } else {\n      window.clearInterval(this.heartbeatInterval)\n      window.removeEventListener('keypress', this.keyHandler)\n    }\n    this.isPaused = !this.isPaused\n  }\n\n  static showGameOverText () {\n    document.getElementById('gameOverContainer').hidden = false\n  }\n}\n","import { Game } from './game/game.js'\n\nconst canvas = document.createElement('canvas')\ncanvas.setAttribute('id', 'gameCanvas')\n\nconst gameContainer = document.getElementById('gameContainer')\ngameContainer.append(canvas)\n\nconst game = new Game(canvas)\ngame.init()\n"],"sourceRoot":""}