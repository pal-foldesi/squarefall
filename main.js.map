{"version":3,"sources":["webpack://squarefall/./src/constants.js","webpack://squarefall/./src/grid/grid.js","webpack://squarefall/./src/score/score.js","webpack://squarefall/./src/speed/speed.js","webpack://squarefall/./src/game/game.js","webpack://squarefall/./src/point/point.js","webpack://squarefall/./src/square/square.js","webpack://squarefall/./src/shape/shape.js","webpack://squarefall/./src/bootstrap.js","webpack://squarefall/./src/shape-generator/shape-generator.js"],"names":["SQUARE_SIDE_LENGTH","Grid","canvas","context","this","shapes","movingShape","undefined","thereIsRoomToMoveDown","moveDown","thereIsRoomToMoveLeft","moveLeft","thereIsRoomToMoveRight","moveRight","moveShapeDown","points","squares","map","square","point","shape","otherPoints","filter","some","otherPoint","x","y","length","clear","rotateClockwise","allPointsFitInsideGrid","noOtherShapeIsInTheWay","rotateCounterClockwise","draw","every","width","height","getLargestY","noOtherShapeIsInTheWayDown","getSmallestX","noOtherShapeIsInTheWayLeft","getLargestX","noOtherShapeIsInTheWayRight","amountOfPointsInRow","rowCount","fullRowCount","i","occupiedSquaresAndShapes","Map","set","size","remove","shiftDownward","rowIndex","yLimit","clearAndMoveSquaresBelowYLimit","otherShape","hasCommonPointWith","strokeStyle","beginPath","moveTo","lineTo","stroke","drawPoints","drawCoordinates","Score","high","getHighScore","document","getElementById","innerText","current","highScore","localStorage","getItem","rowsCleared","value","newValue","setItem","Speed","delay","desiredSpeed","increase","Game","shapeGenerator","setCanvasWidth","setCanvasHeight","window","setTimeout","hidden","style","display","grid","generatedShape","generateShape","push","score","speed","SCORE_PER_SPEED_INCREASE","MAX_SPEED","paused","event","key","pause","keyPressed","moveShapeLeft","rotateShape","moveShapeRight","clearInterval","heartbeatInterval","moveShapeToBottom","removeFullRows","requestScoreIncrease","requestSpeedIncrease","end","setInterval","self","heartbeat","drawAllPoints","drawEdgePoints","drawLines","keyHandler","bind","addEventListener","pauseKeyHandler","isPaused","screen","availWidth","desiredHeight","availHeight","submit","showGameOverText","removeEventListener","currentSpeed","Math","trunc","get","increaseIfNecessary","increment","Point","oldX","oldY","translate","offsetX","offsetY","Square","fillStyle","sideLength","fillRect","arc","PI","fillText","drawEdgePoint","color","clearRect","otherSquare","equals","transformClockwise","transformCounterClockwise","Shape","pointOfTranslation","pointOfTranslationSquare","otherSquares","largestY","calculateLargestY","smallestX","calculateSmallestX","largestX","calculateLargestX","getPointOfTranslationX","squareToRemove","Object","prototype","hasOwnProperty","call","forEach","drawPoint","thisPoint","sort","pop","shift","redraw","isBelowLimit","clearAndMoveDown","I","xCoordOfAppearance","super","init","O","point1","point2","point3","L","J","S","Z","T","createElement","setAttribute","append","getContext","shapeTypesAsArray","values","ChosenShapeType","round","random"],"mappings":"mBAAO,MAAMA,EAAqB,GCInB,MAAMC,EACnB,YAAaC,EAAQC,GACnBC,KAAKF,OAASA,EACdE,KAAKD,QAAUA,EACfC,KAAKC,OAAS,GACdD,KAAKE,iBAAcC,EAGrB,gBACMH,KAAKI,yBACPJ,KAAKE,YAAYG,WAIrB,gBACML,KAAKM,yBACPN,KAAKE,YAAYK,WAIrB,iBACMP,KAAKQ,0BACPR,KAAKE,YAAYO,YAIrB,oBACE,KAAOT,KAAKI,yBACVJ,KAAKU,gBAIT,6BACE,MAAMC,EAASX,KAAKE,YAAYU,QAAQC,KAAIC,GAAUA,EAAOC,QAE7D,IAAK,MAAMC,KAAShB,KAAKC,OACvB,GAAIe,IAAUhB,KAAKE,YAAa,CAC9B,MAAMe,EAAcD,EAAMJ,QAAQC,KAAIC,GAAUA,EAAOC,QASvD,GAPqBJ,EAClBO,QAAOH,GAASE,EACdE,MAAKC,GACJA,EAAWC,IAAMN,EAAMM,GACvBD,EAAWE,IAAMP,EAAMO,EAAI1B,MAGhB2B,OAAS,EACxB,OAAO,EAKb,OAAO,EAGT,6BACE,MAAMZ,EAASX,KAAKE,YAAYU,QAAQC,KAAIC,GAAUA,EAAOC,QAE7D,IAAK,MAAMC,KAAShB,KAAKC,OACvB,GAAIe,IAAUhB,KAAKE,YAAa,CAC9B,MAAMe,EAAcD,EAAMJ,QAAQC,KAAIC,GAAUA,EAAOC,QASvD,GAPqBJ,EAClBO,QAAOH,GAASE,EACdE,MAAKC,GACJA,EAAWC,EAAIzB,IAAuBmB,EAAMM,GAC5CD,EAAWE,IAAMP,EAAMO,MAGZC,OAAS,EACxB,OAAO,EAKb,OAAO,EAGT,8BACE,MAAMZ,EAASX,KAAKE,YAAYU,QAAQC,KAAIC,GAAUA,EAAOC,QAE7D,IAAK,MAAMC,KAAShB,KAAKC,OACvB,GAAIe,IAAUhB,KAAKE,YAAa,CAC9B,MAAMe,EAAcD,EAAMJ,QAAQC,KAAIC,GAAUA,EAAOC,QASvD,GAPqBJ,EAClBO,QAAOH,GAASE,EACdE,MAAKC,GACJA,EAAWC,IAAMN,EAAMM,EAAIzB,GAC3BwB,EAAWE,IAAMP,EAAMO,MAGZC,OAAS,EACxB,OAAO,EAKb,OAAO,EAGT,cACEvB,KAAKE,YAAYsB,QACjBxB,KAAKE,YAAYuB,kBAEXzB,KAAK0B,0BAA4B1B,KAAK2B,uBAAuB3B,KAAKE,cACtEF,KAAKE,YAAY0B,yBAGnB5B,KAAKE,YAAY2B,OAGnB,yBACE,OAAO7B,KAAKE,YAAYU,QAAQC,KAAIC,GAAUA,EAAOC,MAAMM,IACxDS,OAAMT,GAAKA,GAAK,GAAKA,GAAKrB,KAAKF,OAAOiC,MAAQnC,KAC/CI,KAAKE,YAAYU,QAAQC,KAAIC,GAAUA,EAAOC,MAAMO,IACjDQ,OAAMR,GAAKA,GAAK,GAAKA,GAAKtB,KAAKF,OAAOkC,OAASpC,IAGtD,wBAEE,OADiBI,KAAKE,YAAY+B,cACfrC,EAAqBI,KAAKF,OAAOkC,QAAWhC,KAAKkC,6BAGtE,wBACE,OAAOlC,KAAKE,YAAYiC,eAAiBvC,GAAsB,GAAKI,KAAKoC,6BAG3E,yBACE,OAAOpC,KAAKE,YAAYmC,cAAgBzC,EAAqBI,KAAKF,OAAOiC,OAAS/B,KAAKsC,8BAGzF,iBACE,MAAMC,EAAsBvC,KAAKF,OAAOiC,MAAQnC,EAC1C4C,EAAWxC,KAAKF,OAAOkC,OAASpC,EACtC,IAAI6C,EAAe,EAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAUE,GAAK,EAAG,CACpC,MAAMC,EAA2B,IAAIC,IACrC,IAAK,MAAM5B,KAAShB,KAAKC,OACvB,IAAK,MAAMa,KAAUE,EAAMJ,QACrBE,EAAOC,MAAMO,IAAMoB,EAAI9C,GACzB+C,EAAyBE,IAAI/B,EAAQE,GAK3C,GAAI2B,EAAyBG,OAASP,EAAqB,CACzDE,GAAgB,EAChB,IAAK,MAAO3B,EAAQE,KAAU2B,EAC5B7B,EAAOU,QACPR,EAAM+B,OAAOjC,GAEfd,KAAKgD,cAAcN,IAGvB,OAAOD,EAGT,cAAeQ,GAEb,MAAMC,EAASD,EAAWrD,EAC1B,IAAK,MAAMoB,KAAShB,KAAKC,OACRe,EAAMmC,+BAA+BD,IAElDlC,EAAMa,OAKZ,uBAAwBb,GACtB,IAAK,MAAMoC,KAAcpD,KAAKC,OAC5B,GAAImD,IAAepC,GACboC,EAAWC,mBAAmBrC,GAChC,OAAO,EAKb,OAAO,EAGT,YACE,MAAMwB,EAAWxC,KAAKF,OAAOkC,OAASpC,EACtC,IAAK,IAAI8C,EAAI,EAAGA,EAAIF,EAAUE,GAAK,EACjC1C,KAAKD,QAAQuD,YAAc,QAC3BtD,KAAKD,QAAQwD,YACbvD,KAAKD,QAAQyD,OAAO,EAAGd,EAAI9C,GAC3BI,KAAKD,QAAQ0D,OAAOzD,KAAKF,OAAOiC,MAAOW,EAAI9C,GAC3CI,KAAKD,QAAQ2D,SAIjB,gBACE,IAAK,MAAM1C,KAAShB,KAAKC,OACvBe,EAAM2C,aAIV,kBACE,IAAK,MAAM3C,KAAShB,KAAKC,OACvBe,EAAM4C,mBC7MG,MAAMC,EACnB,cACE7D,KAAK8D,KAAOD,EAAME,eAClBC,SAASC,eAAe,cAAcC,UAAYlE,KAAK8D,KACvD9D,KAAKmE,QAAU,EAGjB,sBACE,IAAIC,EAAYC,aAAaC,QAAQ,eAIrC,YAHkBnE,IAAdiE,IACFA,EAAY,GAEPA,EAGT,yBAA0BG,GAExB,OADe,GAAKA,EAAe,EAIrC,UAAWC,GACTxE,KAAKmE,SAAWK,EAChBR,SAASC,eAAe,iBAAiBC,UAAYlE,KAAKmE,QAG5D,MACE,OAAOnE,KAAKmE,QAGd,IAAKM,GACHzE,KAAKmE,QAAUM,EAGjB,SACMzE,KAAKmE,QAAUnE,KAAK8D,OACtBO,aAAaK,QAAQ,cAAe1E,KAAKmE,SACzCH,SAASC,eAAe,cAAcC,UAAYlE,KAAKmE,UCpC9C,MAAMQ,EACnB,cACE3E,KAAKwE,MAAQ,EACbxE,KAAK4E,MAAQ,IAGf,WACE5E,KAAKwE,OAAS,EACdxE,KAAK4E,MAAQ,IAAO,IAAM5E,KAAKwE,MAGjC,oBAAqBK,GAInB,OAHIA,EAAe7E,KAAKwE,OACtBxE,KAAK8E,WAEA9E,KAAKwE,OCTT,MAAMO,EACX,YAAajF,EAAQC,EAASiF,GAC5BhF,KAAKF,OAASA,EACdE,KAAKD,QAAUA,EACfC,KAAKgF,eAAiBA,EAGxB,OACEhF,KAAKiF,iBACLjF,KAAKkF,kBAELC,OAAOC,YAAW,KAChBpB,SAASC,eAAe,WAAWoB,QAAS,EAC5CrB,SAASC,eAAe,aAAaqB,MAAMC,QAAU,SACpD,KAEHvF,KAAKwF,KAAO,IAAI3F,EAAKG,KAAKF,OAAQE,KAAKD,SACvC,MAAM0F,EAAiBzF,KAAKgF,eAAeU,gBAC3C1F,KAAKwF,KAAKvF,OAAO0F,KAAKF,GACtBzF,KAAKwF,KAAKtF,YAAcuF,EACxBA,EAAe5D,OACf7B,KAAK4F,MAAQ,IAAI/B,EACjB7D,KAAK6F,MAAQ,IAAIlB,EACjBX,SAASC,eAAe,iBAAiBC,UAAYlE,KAAK6F,MAAMrB,MAChExE,KAAK8F,yBAA2B,GAChC9F,KAAK+F,UAAY,EACjB/F,KAAKgG,OAAUC,IACb,GAAIjG,KAAKwF,KAAKtF,YACZ,OAAQ+F,EAAMC,KACZ,IAAK,IAAKlG,KAAKmG,UAKrBnG,KAAKoG,WAAcH,IACjB,GAAIjG,KAAKwF,KAAKtF,YACZ,OAAQ+F,EAAMC,KACZ,IAAK,IAAKlG,KAAKwF,KAAKa,gBAAiB,MACrC,IAAK,IAAKrG,KAAKwF,KAAKc,cAAe,MACnC,IAAK,IAAKtG,KAAKwF,KAAKe,iBAAkB,MACtC,IAAK,IAMH,GAJApB,OAAOqB,cAAcxG,KAAKyG,mBAC1BzG,KAAKyG,uBAAoBtG,EACzBH,KAAKwF,KAAKkB,qBAEL1G,KAAKwF,KAAKpF,wBAAyB,CACtCJ,KAAKwF,KAAKtF,iBAAcC,EACxB,MAAMsC,EAAezC,KAAKwF,KAAKmB,iBAC3BlE,EAAe,IACjBzC,KAAK4G,qBAAqBnE,GAC1BzC,KAAK6G,wBAEP,MAAMpB,EAAiBzF,KAAKgF,eAAeU,gBACvC1F,KAAKwF,KAAK7D,uBAAuB8D,IACnCzF,KAAKwF,KAAKvF,OAAO0F,KAAKF,GACtBA,EAAe5D,OACf7B,KAAKwF,KAAKtF,YAAcuF,GAExBzF,KAAK8G,MAIL9G,KAAKwF,KAAKtF,kBAA0CC,IAA3BH,KAAKyG,oBAChCzG,KAAKyG,kBAAoBtB,OAAO4B,aAAY,IAAMC,EAAKC,aAAaD,EAAKnB,MAAMjB,QAEjF,MACF,IAAK,IAAK5E,KAAKwF,KAAK0B,gBAAiB,MACrC,IAAK,IAAKlH,KAAKwF,KAAK5B,kBAAmB,MACvC,IAAK,IAAK5D,KAAKwF,KAAKtF,YAAYiH,iBAAkB,MAClD,IAAK,IAAKnH,KAAKwF,KAAK4B,cAK1BpH,KAAKqH,WAAarH,KAAKoG,WAAWkB,KAAKtH,MACvCmF,OAAOoC,iBAAiB,WAAYvH,KAAKqH,YACzCrH,KAAKwH,gBAAkBxH,KAAKgG,OAAOsB,KAAKtH,MACxCmF,OAAOoC,iBAAiB,WAAYvH,KAAKwH,iBAEzC,MAAMR,EAAOhH,KACbA,KAAKyG,kBAAoBtB,OAAO4B,aAAY,IAAMC,EAAKC,aAAaD,EAAKnB,MAAMjB,OAE/E5E,KAAKyH,UAAW,EAGlB,iBACuB,IAEFtC,OAAOuC,OAAOC,aAC/B3H,KAAKF,OAAOiC,MAHO,KAOvB,kBACE,IAAI6F,EAAgBzC,OAAOuC,OAAOG,YAE9BD,EAAgB,KAAQ,IAC1BA,GAAiBA,EAAgB,KAGnCA,GAAiB,IAEbA,EAAgB,MAClBA,EAAgB,KAGlB5H,KAAKF,OAAOkC,OAAS4F,EAGvB,YACE,IAAK5H,KAAKwF,KAAKpF,wBAAyB,CACtCJ,KAAKwF,KAAKtF,iBAAcC,EACxB,MAAMsC,EAAezC,KAAKwF,KAAKmB,iBAC3BlE,EAAe,IACjBzC,KAAK4G,qBAAqBnE,GAC1BzC,KAAK6G,wBAEP,MAAMpB,EAAiBzF,KAAKgF,eAAeU,gBACvC1F,KAAKwF,KAAK7D,uBAAuB8D,IACnCzF,KAAKwF,KAAKvF,OAAO0F,KAAKF,GACtBA,EAAe5D,OACf7B,KAAKwF,KAAKtF,YAAcuF,GAExBzF,KAAK8G,MAIL9G,KAAKwF,KAAKtF,aAAeF,KAAKwF,KAAKpF,yBACrCJ,KAAKwF,KAAK9E,gBAId,MACEV,KAAK4F,MAAMkC,SACX/C,EAAKgD,mBACL5C,OAAOqB,cAAcxG,KAAKyG,mBAC1BtB,OAAO6C,oBAAoB,WAAYhI,KAAKqH,YAC5ClC,OAAO6C,oBAAoB,WAAYhI,KAAKwH,iBAG9C,uBACE,GAAIxH,KAAK6F,MAAMrB,MAAQxE,KAAK+F,UAAW,CACrC,MAAMkC,EAAejI,KAAK6F,MAAMrB,MAC1BK,EAAeqD,KAAKC,MAAMnI,KAAK4F,MAAMwC,MAAQpI,KAAK8F,0BAGxD,GAFiB9F,KAAK6F,MAAMwC,oBAAoBxD,GAEjCoD,EAAc,CAC3B9C,OAAOqB,cAAcxG,KAAKyG,mBAC1B,MAAMO,EAAOhH,KACbA,KAAKyG,kBAAoBtB,OAAO4B,aAAY,IAAMC,EAAKC,aAAaD,EAAKnB,MAAMjB,OAC/EZ,SAASC,eAAe,iBAAiBC,UAAYlE,KAAK6F,MAAMrB,QAKtE,qBAAsBD,GACpBvE,KAAK4F,MAAM0C,UAAU/D,GAGvB,QACE,GAAIvE,KAAKyH,SAAU,CACjBtC,OAAOoC,iBAAiB,WAAYvH,KAAKqH,YACzC,MAAML,EAAOhH,KACbA,KAAKyG,kBAAoBtB,OAAO4B,aAAY,IAAMC,EAAKC,aAAajH,KAAK6F,MAAMjB,YAE/EO,OAAOqB,cAAcxG,KAAKyG,mBAC1BtB,OAAO6C,oBAAoB,WAAYhI,KAAKqH,YAE9CrH,KAAKyH,UAAYzH,KAAKyH,SAGxB,0BACEzD,SAASC,eAAe,qBAAqBoB,QAAS,GC/K3C,MAAMkD,EACnB,YAAalH,EAAGC,GACdtB,KAAKqB,EAAIA,EACTrB,KAAKsB,EAAIA,EAGX,WACEtB,KAAKsB,GAAK1B,EAGZ,WACEI,KAAKqB,IAAK,GAGZ,YACErB,KAAKqB,GAAKzB,EAGZ,mBAAoB4I,EAAMC,GACxBzI,KAAK0I,WAAWF,GAAOC,GACvBzI,KAAKyB,kBACLzB,KAAK0I,UAAUF,EAAMC,GAGvB,0BAA2BD,EAAMC,GAC/BzI,KAAK0I,WAAWF,GAAOC,GACvBzI,KAAK4B,yBACL5B,KAAK0I,UAAUF,EAAMC,GAGvB,UAAWE,EAASC,GAClB5I,KAAKqB,EAAIrB,KAAKqB,EAAIsH,EAClB3I,KAAKsB,EAAItB,KAAKsB,EAAIsH,EAGpB,kBACE,MAAMJ,EAAOxI,KAAKqB,EACZoH,EAAOzI,KAAKsB,EAclBtB,KAAKqB,GAAKoH,EACVzI,KAAKsB,EAAIkH,EAGX,yBACE,MAAMA,EAAOxI,KAAKqB,EACZoH,EAAOzI,KAAKsB,EAclBtB,KAAKqB,EAAIoH,EACTzI,KAAKsB,GAAKkH,EAGZ,OAAQpH,GACN,OAAOA,aAAsBmH,GACH,iBAAjBnH,EAAWC,GACM,iBAAjBD,EAAWE,GAClBtB,KAAKqB,IAAMD,EAAWC,GACtBrB,KAAKsB,IAAMF,EAAWE,GClFb,MAAMuH,EACnB,YAAa9H,EAAO+H,EAAW/I,GAE7BC,KAAKe,MAAQA,EACbf,KAAK8I,UAAYA,EACjB9I,KAAKD,QAAUA,EACfC,KAAK+I,WAAanJ,EAGpB,OACEI,KAAKD,QAAQwD,YACbvD,KAAKD,QAAQ+I,UAAY9I,KAAK8I,UAC9B9I,KAAKD,QAAQiJ,SAAShJ,KAAKe,MAAMM,EAAGrB,KAAKe,MAAMO,EAAGtB,KAAK+I,WAAY/I,KAAK+I,YAG1E,YACE/I,KAAKD,QAAQwD,YACbvD,KAAKD,QAAQuD,YAAc,MAC3BtD,KAAKD,QAAQkJ,IAAIjJ,KAAKe,MAAMM,EAAGrB,KAAKe,MAAMO,EAAG,GAAI,EAAG,EAAI4G,KAAKgB,IAC7DlJ,KAAKD,QAAQ2D,SAGf,kBACE1D,KAAKD,QAAQ+I,UAAY,QACzB9I,KAAKD,QAAQoJ,SAAS,GAAGnJ,KAAKe,MAAMM,OAAOrB,KAAKe,MAAMO,IAAKtB,KAAKe,MAAMM,EAAGrB,KAAKe,MAAMO,GAGtF,iBACEtB,KAAKoJ,cAAc,SAAUpJ,KAAKe,MAAMM,EAAGrB,KAAKe,MAAMO,GACtDtB,KAAKoJ,cAAc,OAAQpJ,KAAKe,MAAMM,EAAIzB,EAAoBI,KAAKe,MAAMO,GACzEtB,KAAKoJ,cAAc,UAAWpJ,KAAKe,MAAMM,EAAIzB,EAAoBI,KAAKe,MAAMO,EAAI1B,GAChFI,KAAKoJ,cAAc,QAASpJ,KAAKe,MAAMM,EAAGrB,KAAKe,MAAMO,EAAI1B,GAG3D,cAAeyJ,EAAOhI,EAAGC,GACvBtB,KAAKD,QAAQwD,YACbvD,KAAKD,QAAQuD,YAAc+F,EAC3BrJ,KAAKD,QAAQkJ,IAAI5H,EAAGC,EAAG,GAAI,EAAG,EAAI4G,KAAKgB,IACvClJ,KAAKD,QAAQ2D,SAGf,QACE1D,KAAKD,QAAQuJ,UAAUtJ,KAAKe,MAAMM,EAAGrB,KAAKe,MAAMO,EAAGtB,KAAK+I,WAAY/I,KAAK+I,YAG3E,OAAQQ,GACN,YAAuBpJ,IAAhBoJ,GACLA,aAAuBV,GACvB7I,KAAK+I,aAAeQ,EAAYR,YAChC/I,KAAKe,MAAMyI,OAAOD,EAAYxI,OAGlC,WACEf,KAAKwB,QACLxB,KAAKe,MAAMV,WACXL,KAAK6B,OAGP,mBACE7B,KAAKwB,QACLxB,KAAKe,MAAMV,WAGb,WACEL,KAAKwB,QACLxB,KAAKe,MAAMR,WACXP,KAAK6B,OAGP,YACE7B,KAAKwB,QACLxB,KAAKe,MAAMN,YACXT,KAAK6B,OAGP,mBAAoBR,EAAGC,GACrBtB,KAAKe,MAAM0I,mBAAmBpI,EAAGC,GAGnC,0BAA2BD,EAAGC,GAC5BtB,KAAKe,MAAM2I,0BAA0BrI,EAAGC,GAG1C,aAAc4B,GACZ,OAAOlD,KAAKe,MAAMO,EAAI4B,GCjFnB,MAAMyG,EACX,KAAMb,EAAWc,EAAoBjJ,EAAQZ,GAC3CC,KAAK4J,mBAAqBA,EAE1B,MAAMC,EAA2B,IAAIhB,EAAOe,EAAoBd,EAAW/I,GACrE+J,EAAenJ,EAAOE,KAAIE,GAAS,IAAI8H,EAAO9H,EAAO+H,EAAW/I,KAEtEC,KAAKY,QAAU,CAACiJ,KAA6BC,GAE7C9J,KAAK+J,SAAW/J,KAAKgK,oBACrBhK,KAAKiK,UAAYjK,KAAKkK,qBACtBlK,KAAKmK,SAAWnK,KAAKoK,oBAErBpK,KAAKD,QAAUA,EAGjB,yBACE,OAAOC,KAAKqK,uBAGd,OAAQC,GACFC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAgB,UACvDC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAevJ,MAAO,MAC3DwJ,OAAOC,UAAUC,eAAeC,KAAKJ,EAAevJ,MAAO,OAC3Df,KAAKY,QAAUZ,KAAKY,QAAQM,QAAOJ,IAAYA,EAAO0I,OAAOc,KAC7DtK,KAAK+J,SAAW/J,KAAKgK,oBACrBhK,KAAKiK,UAAYjK,KAAKkK,qBACtBlK,KAAKmK,SAAWnK,KAAKoK,qBAIzB,OACEpK,KAAKY,QAAQ+J,SAAQ7J,GAAUA,EAAOe,SAGxC,aACE7B,KAAKY,QAAQ+J,SAAQ7J,GAAUA,EAAO8J,cAGxC,kBACE5K,KAAKY,QAAQ+J,SAAS7J,GAAWA,EAAO8C,oBAG1C,yBACE5D,KAAKD,QAAQ+I,UAAY,2BAEzB9I,KAAKD,QAAQwD,YACbvD,KAAKD,QAAQkJ,IAAIjJ,KAAK4J,mBAAmBvI,EAAGrB,KAAK4J,mBAAmBtI,EAAG,GAAI,EAAG,EAAI4G,KAAKgB,IACvFlJ,KAAKD,QAAQ2D,SAGf,iBACE1D,KAAKY,QAAQ+J,SAAQ7J,IACnBA,EAAOqG,oBAIX,QACEnH,KAAKY,QAAQ+J,SAAQ7J,GAAUA,EAAOU,UAGxC,kBACExB,KAAKY,QAAQ+J,SAAQ7J,IACnBA,EAAO2I,mBAAmBzJ,KAAK4J,mBAAmBvI,EAAGrB,KAAK4J,mBAAmBtI,MAE/EtB,KAAK+J,SAAW/J,KAAKgK,oBACrBhK,KAAKiK,UAAYjK,KAAKkK,qBACtBlK,KAAKmK,SAAWnK,KAAKoK,oBAGvB,yBACEpK,KAAKY,QAAQ+J,SAAQ7J,IACnBA,EAAO4I,0BAA0B1J,KAAK4J,mBAAmBvI,EAAGrB,KAAK4J,mBAAmBtI,MAEtFtB,KAAK+J,SAAW/J,KAAKgK,oBACrBhK,KAAKiK,UAAYjK,KAAKkK,qBACtBlK,KAAKmK,SAAWnK,KAAKoK,oBAGvB,SAAUhJ,GACR,MACMyJ,EADS7K,KAAKY,QAAQC,KAAIC,GAAU,IAAIyH,EAAMzH,EAAOC,MAAMM,EAAGP,EAAOC,MAAMO,KACxDJ,QAAOH,GAASA,EAAMyI,OAAOpI,KACtD,YAAqBjB,IAAd0K,GAA2BA,EAAUtJ,QAA+B,IAArBsJ,EAAUtJ,QAAgBsJ,EAAUrB,OAAOpI,GAGnG,mBAAoBgC,GAClB,IAAK,MAAMtC,KAAUd,KAAKY,QACxB,IAAK,MAAM2I,KAAenG,EAAWxC,QACnC,GAAIE,EAAO0I,OAAOD,GAChB,OAAO,EAKb,OAAO,EAGT,WACEvJ,KAAKwB,QACLxB,KAAKY,QAAQ+J,SAAQ7J,GAAUA,EAAOT,aACtCL,KAAK+J,SAAW/J,KAAKgK,oBACrBhK,KAAK6B,OAGP,WACE7B,KAAKwB,QACLxB,KAAKY,QAAQ+J,SAAQ7J,GAAUA,EAAOP,aACtCP,KAAKiK,UAAYjK,KAAKkK,qBACtBlK,KAAKmK,SAAWnK,KAAKoK,oBACrBpK,KAAK6B,OAGP,YACE7B,KAAKwB,QACLxB,KAAKY,QAAQ+J,SAAQ7J,GAAUA,EAAOL,cACtCT,KAAKiK,UAAYjK,KAAKkK,qBACtBlK,KAAKmK,SAAWnK,KAAKoK,oBACrBpK,KAAK6B,OAGP,oBACE,OAAO7B,KAAKY,QACTC,KAAIC,GAAUA,EAAOC,MAAMO,IAC3BwJ,OACAC,MAGL,qBACE,OAAO/K,KAAKY,QACTC,KAAIC,GAAUA,EAAOC,MAAMM,IAC3ByJ,OACAE,QAGL,oBACE,OAAOhL,KAAKY,QACTC,KAAIC,GAAUA,EAAOC,MAAMM,IAC3ByJ,OACAC,MAGL,cACE,OAAO/K,KAAK+J,SAGd,eACE,OAAO/J,KAAKiK,UAGd,cACE,OAAOjK,KAAKmK,SAGd,+BAAgCjH,GAC9B,IAAI+H,GAAS,EAOb,OANAjL,KAAKY,QAAQ+J,SAAQ7J,IACfA,EAAOoK,aAAahI,KACtBpC,EAAOqK,mBACPF,GAAS,MAGNA,GAiIX,MAUA,EAVmB,CACjBG,EAtFF,cAAgBzB,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAM1B,EAAqB,IAAIrB,EAAM8C,EAAoB,GAKnDpK,EAAc,CAJL,IAAIsH,EAAM8C,EAAqB,IAAwB,GACvD,IAAI9C,EAAM8C,EAAqBzL,EAAoB,GACnD,IAAI2I,EAAM8C,EAAqBzL,EAAoB,IAMlE0L,MAAMC,KAFY,cAEI3B,EAAoB3I,EAAalB,KA0EzDyL,EA/HF,cAAgB7B,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAMG,EAAS,IAAIlD,EAAM8C,EAAqBzL,EAAoB,GAC5D8L,EAAS,IAAInD,EAAM8C,EAAoB,GACvCM,EAAS,IAAIpD,EAAM8C,EAAqBzL,EAAoBA,GAC5DgK,EAAqB,IAAIrB,EAAM8C,EAAoBzL,GAEnDqB,EAAc,CAACwK,EAAQC,EAAQC,GAIrCL,MAAMC,KAFY,UAEI3B,EAAoB3I,EAAalB,GAIzD,mBAGA,4BA4GA6L,EArCF,cAAgBjC,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAMG,EAAS,IAAIlD,EAAM8C,EAAqB,IAAwB,GAChEzB,EAAqB,IAAIrB,EAAM8C,EAAqBzL,EAAoB,GAIxEqB,EAAc,CAACwK,EAHN,IAAIlD,EAAM8C,EAAoB,GAC9B,IAAI9C,EAAM8C,EAAqB,IAAwBzL,IAMtE0L,MAAMC,KAFY,YAEI3B,EAAoB3I,EAAalB,KAyBzD8L,EArBF,cAAgBlC,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAMG,EAAS,IAAIlD,EAAM8C,EAAqBzL,EAAoB,GAC5DgK,EAAqB,IAAIrB,EAAM8C,EAAoB,GAInDpK,EAAc,CAACwK,EAHN,IAAIlD,EAAM8C,EAAqBzL,EAAoB,GACnD,IAAI2I,EAAM8C,EAAqBzL,EAAoBA,IAMlE0L,MAAMC,KAFY,aAEI3B,EAAoB3I,EAAalB,KASzD+L,EAzEF,cAAgBnC,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAMG,EAAS,IAAIlD,EAAM8C,EAAqBzL,EAAoB,GAC5D8L,EAAS,IAAInD,EAAM8C,EAAoB,GACvCM,EAAS,IAAIpD,EAAM8C,EAAqB,IAAwBzL,GAChEgK,EAAqB,IAAIrB,EAAM8C,EAAqBzL,EAAoBA,GAExEqB,EAAc,CAACwK,EAAQC,EAAQC,GAIrCL,MAAMC,KAFY,QAEI3B,EAAoB3I,EAAalB,KA6DzDgM,EAzDF,cAAgBpC,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAMG,EAAS,IAAIlD,EAAM8C,EAAqBzL,EAAoB,GAC5D8L,EAAS,IAAInD,EAAM8C,EAAoB,GACvCzB,EAAqB,IAAIrB,EAAM8C,EAAoBzL,GAGnDqB,EAAc,CAACwK,EAAQC,EAFd,IAAInD,EAAM8C,EAAqBzL,EAAoBA,IAMlE0L,MAAMC,KAFY,MAEI3B,EAAoB3I,EAAalB,KA6CzDiM,EA7GF,cAAgBrC,EACd,YAAa0B,EAAoBtL,GAC/BuL,QAEA,MAAMG,EAAS,IAAIlD,EAAM8C,EAAqBzL,EAAoBA,GAC5DgK,EAAqB,IAAIrB,EAAM8C,EAAoBzL,GAInDqB,EAAc,CAACwK,EAHN,IAAIlD,EAAM8C,EAAqBzL,EAAoBA,GACnD,IAAI2I,EAAM8C,EAAoB,IAM7CC,MAAMC,KAFY,YAEI3B,EAAoB3I,EAAalB,MC3MrDD,EAASkE,SAASiI,cAAc,UACtCnM,EAAOoM,aAAa,KAAM,cAEJlI,SAASC,eAAe,iBAChCkI,OAAOrM,GAErB,MAAMC,EAAUD,EAAOsM,WAAW,MAC5BpH,EAAiB,ICRhB,MACL,YAAalF,EAAQC,GACnBC,KAAKF,OAASA,EACdE,KAAKD,QAAUA,EAGjB,gBACE,MAAMsM,EAAoB9B,OAAO+B,OAAO,GAKxC,OADc,IAAIC,EAFMF,EADCnE,KAAKsE,MAAMtE,KAAKuE,UAAYJ,EAAkB9K,OAAS,MAEhDvB,KAAKF,OAAOiC,MAAQ,EACO/B,KAAKD,WDH1BD,EAAQC,GACrC,IAAIgF,EAAKjF,EAAQC,EAASiF,GAClCuG,Q","file":"main.js","sourcesContent":["export const SQUARE_SIDE_LENGTH = 50\n","import {\n  SQUARE_SIDE_LENGTH\n} from '../constants.js'\n\nexport default class Grid {\n  constructor (canvas, context) {\n    this.canvas = canvas\n    this.context = context\n    this.shapes = []\n    this.movingShape = undefined\n  }\n\n  moveShapeDown () {\n    if (this.thereIsRoomToMoveDown()) {\n      this.movingShape.moveDown()\n    }\n  }\n\n  moveShapeLeft () {\n    if (this.thereIsRoomToMoveLeft()) {\n      this.movingShape.moveLeft()\n    }\n  }\n\n  moveShapeRight () {\n    if (this.thereIsRoomToMoveRight()) {\n      this.movingShape.moveRight()\n    }\n  }\n\n  moveShapeToBottom () {\n    while (this.thereIsRoomToMoveDown()) {\n      this.moveShapeDown()\n    }\n  }\n\n  noOtherShapeIsInTheWayDown () {\n    const points = this.movingShape.squares.map(square => square.point)\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point)\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x === point.x &&\n              otherPoint.y === point.y + SQUARE_SIDE_LENGTH)\n          )\n\n        if (commonPoints.length > 0) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  noOtherShapeIsInTheWayLeft () {\n    const points = this.movingShape.squares.map(square => square.point)\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point)\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x + SQUARE_SIDE_LENGTH === point.x &&\n              otherPoint.y === point.y)\n          )\n\n        if (commonPoints.length > 0) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  noOtherShapeIsInTheWayRight () {\n    const points = this.movingShape.squares.map(square => square.point)\n\n    for (const shape of this.shapes) {\n      if (shape !== this.movingShape) {\n        const otherPoints = shape.squares.map(square => square.point)\n\n        const commonPoints = points\n          .filter(point => otherPoints\n            .some(otherPoint =>\n              otherPoint.x === point.x + SQUARE_SIDE_LENGTH &&\n              otherPoint.y === point.y)\n          )\n\n        if (commonPoints.length > 0) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  rotateShape () {\n    this.movingShape.clear()\n    this.movingShape.rotateClockwise()\n\n    if (!(this.allPointsFitInsideGrid() && this.noOtherShapeIsInTheWay(this.movingShape))) {\n      this.movingShape.rotateCounterClockwise()\n    }\n\n    this.movingShape.draw()\n  }\n\n  allPointsFitInsideGrid () {\n    return this.movingShape.squares.map(square => square.point.x)\n      .every(x => x >= 0 && x <= this.canvas.width - SQUARE_SIDE_LENGTH) &&\n      this.movingShape.squares.map(square => square.point.y)\n        .every(y => y >= 0 && y <= this.canvas.height - SQUARE_SIDE_LENGTH)\n  }\n\n  thereIsRoomToMoveDown () {\n    const largestY = this.movingShape.getLargestY()\n    return (largestY + SQUARE_SIDE_LENGTH < this.canvas.height) && this.noOtherShapeIsInTheWayDown()\n  }\n\n  thereIsRoomToMoveLeft () {\n    return this.movingShape.getSmallestX() - SQUARE_SIDE_LENGTH >= 0 && this.noOtherShapeIsInTheWayLeft()\n  }\n\n  thereIsRoomToMoveRight () {\n    return this.movingShape.getLargestX() + SQUARE_SIDE_LENGTH < this.canvas.width && this.noOtherShapeIsInTheWayRight()\n  }\n\n  removeFullRows () {\n    const amountOfPointsInRow = this.canvas.width / SQUARE_SIDE_LENGTH\n    const rowCount = this.canvas.height / SQUARE_SIDE_LENGTH\n    let fullRowCount = 0\n\n    for (let i = 0; i < rowCount; i += 1) {\n      const occupiedSquaresAndShapes = new Map()\n      for (const shape of this.shapes) {\n        for (const square of shape.squares) {\n          if (square.point.y === i * SQUARE_SIDE_LENGTH) {\n            occupiedSquaresAndShapes.set(square, shape)\n          }\n        }\n      }\n\n      if (occupiedSquaresAndShapes.size === amountOfPointsInRow) {\n        fullRowCount += 1\n        for (const [square, shape] of occupiedSquaresAndShapes) {\n          square.clear()\n          shape.remove(square)\n        }\n        this.shiftDownward(i)\n      }\n    }\n    return fullRowCount\n  }\n\n  shiftDownward (rowIndex) {\n    //  Everything that is above this rowIndex must shift down by SIDE_LENGTH.\n    const yLimit = rowIndex * SQUARE_SIDE_LENGTH\n    for (const shape of this.shapes) {\n      const redraw = shape.clearAndMoveSquaresBelowYLimit(yLimit)\n      if (redraw) {\n        shape.draw()\n      }\n    }\n  }\n\n  noOtherShapeIsInTheWay (shape) {\n    for (const otherShape of this.shapes) {\n      if (otherShape !== shape) {\n        if (otherShape.hasCommonPointWith(shape)) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  drawLines () {\n    const rowCount = this.canvas.height / SQUARE_SIDE_LENGTH\n    for (let i = 1; i < rowCount; i += 1) {\n      this.context.strokeStyle = 'black'\n      this.context.beginPath()\n      this.context.moveTo(0, i * SQUARE_SIDE_LENGTH)\n      this.context.lineTo(this.canvas.width, i * SQUARE_SIDE_LENGTH)\n      this.context.stroke()\n    }\n  }\n\n  drawAllPoints () {\n    for (const shape of this.shapes) {\n      shape.drawPoints()\n    }\n  }\n\n  drawCoordinates () {\n    for (const shape of this.shapes) {\n      shape.drawCoordinates()\n    }\n  }\n}\n","export default class Score {\n  constructor () {\n    this.high = Score.getHighScore()\n    document.getElementById('high-score').innerText = this.high\n    this.current = 0\n  }\n\n  static getHighScore () {\n    let highScore = localStorage.getItem('tetris-high')\n    if (highScore === undefined) {\n      highScore = 0\n    }\n    return highScore\n  }\n\n  static calculateIncrease (rowsCleared) {\n    const score = (2 ** rowsCleared) + 2\n    return score\n  }\n\n  increment (value) {\n    this.current += value\n    document.getElementById('current-score').innerText = this.current\n  }\n\n  get () {\n    return this.current\n  }\n\n  set (newValue) {\n    this.current = newValue\n  }\n\n  submit () {\n    if (this.current > this.high) {\n      localStorage.setItem('tetris-high', this.current)\n      document.getElementById('high-score').innerText = this.current\n    }\n  }\n}\n","export default class Speed {\n  constructor () {\n    this.value = 0\n    this.delay = 1000\n  }\n\n  increase () {\n    this.value += 1\n    this.delay = 1000 - 100 * this.value\n  }\n\n  increaseIfNecessary (desiredSpeed) {\n    if (desiredSpeed > this.value) {\n      this.increase()\n    }\n    return this.value\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js'\n\nimport Grid from '../grid/grid.js'\nimport Score from '../score/score.js'\nimport Speed from '../speed/speed.js'\n\nexport class Game {\n  constructor (canvas, context, shapeGenerator) {\n    this.canvas = canvas\n    this.context = context\n    this.shapeGenerator = shapeGenerator\n  }\n\n  init () {\n    this.setCanvasWidth()\n    this.setCanvasHeight()\n\n    window.setTimeout(() => {\n      document.getElementById('loading').hidden = true\n      document.getElementById('container').style.display = 'grid'\n    }, 200) // to allow the user some time to spot the loading text\n\n    this.grid = new Grid(this.canvas, this.context)\n    const generatedShape = this.shapeGenerator.generateShape()\n    this.grid.shapes.push(generatedShape)\n    this.grid.movingShape = generatedShape\n    generatedShape.draw()\n    this.score = new Score()\n    this.speed = new Speed()\n    document.getElementById('current-speed').innerText = this.speed.value\n    this.SCORE_PER_SPEED_INCREASE = 50\n    this.MAX_SPEED = 9\n    this.paused = (event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'p': this.pause(); break\n          default: break\n        }\n      }\n    }\n    this.keyPressed = (event) => {\n      if (this.grid.movingShape) {\n        switch (event.key) {\n          case 'j': this.grid.moveShapeLeft(); break\n          case 'k': this.grid.rotateShape(); break\n          case 'l': this.grid.moveShapeRight(); break\n          case ' ':\n            // to avoid possible side effects with several intervals triggering simultaneously or closely after each other\n            window.clearInterval(this.heartbeatInterval)\n            this.heartbeatInterval = undefined\n            this.grid.moveShapeToBottom()\n\n            if (!this.grid.thereIsRoomToMoveDown()) {\n              this.grid.movingShape = undefined\n              const fullRowCount = this.grid.removeFullRows()\n              if (fullRowCount > 0) {\n                this.requestScoreIncrease(fullRowCount)\n                this.requestSpeedIncrease()\n              }\n              const generatedShape = this.shapeGenerator.generateShape()\n              if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n                this.grid.shapes.push(generatedShape)\n                generatedShape.draw()\n                this.grid.movingShape = generatedShape\n              } else {\n                this.end()\n              }\n            }\n\n            if (this.grid.movingShape && this.heartbeatInterval === undefined) {\n              this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n            }\n            break\n          case '1': this.grid.drawAllPoints(); break\n          case '2': this.grid.drawCoordinates(); break\n          case '3': this.grid.movingShape.drawEdgePoints(); break\n          case '4': this.grid.drawLines(); break\n          default: break\n        }\n      }\n    }\n    this.keyHandler = this.keyPressed.bind(this)\n    window.addEventListener('keypress', this.keyHandler)\n    this.pauseKeyHandler = this.paused.bind(this)\n    window.addEventListener('keypress', this.pauseKeyHandler)\n\n    const self = this\n    this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n\n    this.isPaused = false\n  }\n\n  setCanvasWidth () {\n    const desiredWidth = 10 * SQUARE_SIDE_LENGTH\n\n    if (desiredWidth < window.screen.availWidth) {\n      this.canvas.width = desiredWidth\n    }\n  }\n\n  setCanvasHeight () {\n    let desiredHeight = window.screen.availHeight\n\n    if (desiredHeight % 100 !== 0) {\n      desiredHeight -= desiredHeight % 100\n    }\n\n    desiredHeight -= 100 // To leave room for browser/OS UI toolbars\n\n    if (desiredHeight > 20 * SQUARE_SIDE_LENGTH) {\n      desiredHeight = 20 * SQUARE_SIDE_LENGTH\n    }\n\n    this.canvas.height = desiredHeight\n  }\n\n  heartbeat () {\n    if (!this.grid.thereIsRoomToMoveDown()) {\n      this.grid.movingShape = undefined\n      const fullRowCount = this.grid.removeFullRows()\n      if (fullRowCount > 0) {\n        this.requestScoreIncrease(fullRowCount)\n        this.requestSpeedIncrease()\n      }\n      const generatedShape = this.shapeGenerator.generateShape()\n      if (this.grid.noOtherShapeIsInTheWay(generatedShape)) {\n        this.grid.shapes.push(generatedShape)\n        generatedShape.draw()\n        this.grid.movingShape = generatedShape\n      } else {\n        this.end()\n      }\n    }\n\n    if (this.grid.movingShape && this.grid.thereIsRoomToMoveDown()) {\n      this.grid.moveShapeDown()\n    }\n  }\n\n  end () {\n    this.score.submit()\n    Game.showGameOverText()\n    window.clearInterval(this.heartbeatInterval)\n    window.removeEventListener('keypress', this.keyHandler)\n    window.removeEventListener('keypress', this.pauseKeyHandler)\n  }\n\n  requestSpeedIncrease () {\n    if (this.speed.value < this.MAX_SPEED) {\n      const currentSpeed = this.speed.value\n      const desiredSpeed = Math.trunc(this.score.get() / this.SCORE_PER_SPEED_INCREASE)\n      const newSpeed = this.speed.increaseIfNecessary(desiredSpeed)\n\n      if (newSpeed > currentSpeed) {\n        window.clearInterval(this.heartbeatInterval)\n        const self = this\n        this.heartbeatInterval = window.setInterval(() => self.heartbeat(), self.speed.delay)\n        document.getElementById('current-speed').innerText = this.speed.value\n      }\n    }\n  }\n\n  requestScoreIncrease (rowsCleared) {\n    this.score.increment(rowsCleared)\n  }\n\n  pause () {\n    if (this.isPaused) {\n      window.addEventListener('keypress', this.keyHandler)\n      const self = this\n      this.heartbeatInterval = window.setInterval(() => self.heartbeat(), this.speed.delay)\n    } else {\n      window.clearInterval(this.heartbeatInterval)\n      window.removeEventListener('keypress', this.keyHandler)\n    }\n    this.isPaused = !this.isPaused\n  }\n\n  static showGameOverText () {\n    document.getElementById('gameOverContainer').hidden = false\n  }\n}\n","import {\n  SQUARE_SIDE_LENGTH\n} from '../constants.js'\n\nexport default class Point {\n  constructor (x, y) {\n    this.x = x\n    this.y = y\n  }\n\n  moveDown () {\n    this.y += SQUARE_SIDE_LENGTH\n  }\n\n  moveLeft () {\n    this.x += -SQUARE_SIDE_LENGTH\n  }\n\n  moveRight () {\n    this.x += SQUARE_SIDE_LENGTH\n  }\n\n  transformClockwise (oldX, oldY) {\n    this.translate(-oldX, -oldY)\n    this.rotateClockwise()\n    this.translate(oldX, oldY)\n  }\n\n  transformCounterClockwise (oldX, oldY) {\n    this.translate(-oldX, -oldY)\n    this.rotateCounterClockwise()\n    this.translate(oldX, oldY)\n  }\n\n  translate (offsetX, offsetY) {\n    this.x = this.x + offsetX\n    this.y = this.y + offsetY\n  }\n\n  rotateClockwise () {\n    const oldX = this.x\n    const oldY = this.y\n\n    /*\n    We are performing a clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    90 degrees = Math.PI / 2 radians\n    Math.sin(Math.PI / 2) = 1\n    Math.cos(Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * 1 = -oldY\n    newY = oldX * 1 + oldY * 0 = oldX\n    */\n\n    this.x = -oldY\n    this.y = oldX\n  }\n\n  rotateCounterClockwise () {\n    const oldX = this.x\n    const oldY = this.y\n\n    /*\n    We are performing a counter-clockwise 90 degree rotation in a 2D coordinate system.\n    https://en.wikipedia.org/wiki/Rotation_matrix\n\n    -90 degrees = 3 * Math.PI / 2 radians\n    Math.sin(3 * Math.PI / 2) = -1\n    Math.cos(3 * Math.PI / 2) = 0\n\n    newX = oldX * 0 - oldY * -1 = oldY\n    newY = oldX * -1 + oldY * 0 = -oldX\n    */\n\n    this.x = oldY\n    this.y = -oldX\n  }\n\n  equals (otherPoint) {\n    return otherPoint instanceof Point &&\n      typeof otherPoint.x === 'number' &&\n      typeof otherPoint.y === 'number' &&\n      this.x === otherPoint.x &&\n      this.y === otherPoint.y\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js'\n\nexport default class Square {\n  constructor (point, fillStyle, context) {\n    // The point of a Square always refers to its top left point\n    this.point = point\n    this.fillStyle = fillStyle\n    this.context = context\n    this.sideLength = SQUARE_SIDE_LENGTH\n  }\n\n  draw () {\n    this.context.beginPath()\n    this.context.fillStyle = this.fillStyle\n    this.context.fillRect(this.point.x, this.point.y, this.sideLength, this.sideLength)\n  }\n\n  drawPoint () {\n    this.context.beginPath()\n    this.context.strokeStyle = 'red'\n    this.context.arc(this.point.x, this.point.y, 10, 0, 2 * Math.PI)\n    this.context.stroke()\n  }\n\n  drawCoordinates () {\n    this.context.fillStyle = 'black'\n    this.context.fillText(`${this.point.x} | ${this.point.y}`, this.point.x, this.point.y)\n  }\n\n  drawEdgePoints () {\n    this.drawEdgePoint('yellow', this.point.x, this.point.y)\n    this.drawEdgePoint('blue', this.point.x + SQUARE_SIDE_LENGTH, this.point.y)\n    this.drawEdgePoint('magenta', this.point.x + SQUARE_SIDE_LENGTH, this.point.y + SQUARE_SIDE_LENGTH)\n    this.drawEdgePoint('black', this.point.x, this.point.y + SQUARE_SIDE_LENGTH)\n  }\n\n  drawEdgePoint (color, x, y) {\n    this.context.beginPath()\n    this.context.strokeStyle = color\n    this.context.arc(x, y, 10, 0, 2 * Math.PI)\n    this.context.stroke()\n  }\n\n  clear () {\n    this.context.clearRect(this.point.x, this.point.y, this.sideLength, this.sideLength)\n  }\n\n  equals (otherSquare) {\n    return otherSquare !== undefined &&\n      otherSquare instanceof Square &&\n      this.sideLength === otherSquare.sideLength &&\n      this.point.equals(otherSquare.point)\n  }\n\n  moveDown () {\n    this.clear()\n    this.point.moveDown()\n    this.draw()\n  }\n\n  clearAndMoveDown () {\n    this.clear()\n    this.point.moveDown()\n  }\n\n  moveLeft () {\n    this.clear()\n    this.point.moveLeft()\n    this.draw()\n  }\n\n  moveRight () {\n    this.clear()\n    this.point.moveRight()\n    this.draw()\n  }\n\n  transformClockwise (x, y) {\n    this.point.transformClockwise(x, y)\n  }\n\n  transformCounterClockwise (x, y) {\n    this.point.transformCounterClockwise(x, y)\n  }\n\n  isBelowLimit (yLimit) {\n    return this.point.y < yLimit\n  }\n}\n","import { SQUARE_SIDE_LENGTH } from '../constants.js'\n\nimport Point from '../point/point.js'\nimport Square from '../square/square.js'\n\nexport class Shape {\n  init (fillStyle, pointOfTranslation, points, context) {\n    this.pointOfTranslation = pointOfTranslation\n\n    const pointOfTranslationSquare = new Square(pointOfTranslation, fillStyle, context)\n    const otherSquares = points.map(point => new Square(point, fillStyle, context))\n\n    this.squares = [pointOfTranslationSquare, ...otherSquares]\n\n    this.largestY = this.calculateLargestY()\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n\n    this.context = context\n  }\n\n  getPointOfTranslationX () {\n    return this.getPointOfTranslationX\n  }\n\n  remove (squareToRemove) {\n    if (Object.prototype.hasOwnProperty.call(squareToRemove, 'point') &&\n      Object.prototype.hasOwnProperty.call(squareToRemove.point, 'x') &&\n      Object.prototype.hasOwnProperty.call(squareToRemove.point, 'y')) {\n      this.squares = this.squares.filter(square => !(square.equals(squareToRemove)))\n      this.largestY = this.calculateLargestY()\n      this.smallestX = this.calculateSmallestX()\n      this.largestX = this.calculateLargestX()\n    }\n  }\n\n  draw () {\n    this.squares.forEach(square => square.draw())\n  }\n\n  drawPoints () {\n    this.squares.forEach(square => square.drawPoint())\n  }\n\n  drawCoordinates () {\n    this.squares.forEach((square) => square.drawCoordinates())\n  }\n\n  markPointOfTranslation () {\n    this.context.fillStyle = 'rgba(120, 230, 244, 0.2)'\n\n    this.context.beginPath()\n    this.context.arc(this.pointOfTranslation.x, this.pointOfTranslation.y, 10, 0, 2 * Math.PI)\n    this.context.stroke()\n  }\n\n  drawEdgePoints () {\n    this.squares.forEach(square => {\n      square.drawEdgePoints()\n    })\n  }\n\n  clear () {\n    this.squares.forEach(square => square.clear())\n  }\n\n  rotateClockwise () {\n    this.squares.forEach(square => {\n      square.transformClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y)\n    })\n    this.largestY = this.calculateLargestY()\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n  }\n\n  rotateCounterClockwise () {\n    this.squares.forEach(square => {\n      square.transformCounterClockwise(this.pointOfTranslation.x, this.pointOfTranslation.y)\n    })\n    this.largestY = this.calculateLargestY()\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n  }\n\n  hasPoint (otherPoint) {\n    const points = this.squares.map(square => new Point(square.point.x, square.point.y))\n    const thisPoint = points.filter(point => point.equals(otherPoint))\n    return thisPoint !== undefined && thisPoint.length && thisPoint.length !== 0 && thisPoint.equals(otherPoint)\n  }\n\n  hasCommonPointWith (otherShape) {\n    for (const square of this.squares) {\n      for (const otherSquare of otherShape.squares) {\n        if (square.equals(otherSquare)) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  moveDown () {\n    this.clear()\n    this.squares.forEach(square => square.moveDown())\n    this.largestY = this.calculateLargestY()\n    this.draw()\n  }\n\n  moveLeft () {\n    this.clear()\n    this.squares.forEach(square => square.moveLeft())\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n    this.draw()\n  }\n\n  moveRight () {\n    this.clear()\n    this.squares.forEach(square => square.moveRight())\n    this.smallestX = this.calculateSmallestX()\n    this.largestX = this.calculateLargestX()\n    this.draw()\n  }\n\n  calculateLargestY () {\n    return this.squares\n      .map(square => square.point.y)\n      .sort()\n      .pop()\n  }\n\n  calculateSmallestX () {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .shift()\n  }\n\n  calculateLargestX () {\n    return this.squares\n      .map(square => square.point.x)\n      .sort()\n      .pop()\n  }\n\n  getLargestY () {\n    return this.largestY\n  }\n\n  getSmallestX () {\n    return this.smallestX\n  }\n\n  getLargestX () {\n    return this.largestX\n  }\n\n  clearAndMoveSquaresBelowYLimit (yLimit) {\n    let redraw = false\n    this.squares.forEach(square => {\n      if (square.isBelowLimit(yLimit)) {\n        square.clearAndMoveDown()\n        redraw = true\n      }\n    })\n    return redraw\n  }\n}\n\nclass O extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const point3 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'thistle'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateClockwise () { }\n\n  // eslint-disable-next-line class-methods-use-this\n  rotateCounterClockwise () { }\n}\n\nclass T extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH)\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const point3 = new Point(xCoordOfAppearance, 0)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'lightgrey'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass I extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0)\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'yellowgreen'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass S extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'khaki'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass Z extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const pointOfTranslation = new Point(xCoordOfAppearance, SQUARE_SIDE_LENGTH)\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'tan'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass L extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, 0)\n    const pointOfTranslation = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const point2 = new Point(xCoordOfAppearance, 0)\n    const point3 = new Point(xCoordOfAppearance - 2 * SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'lightblue'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nclass J extends Shape {\n  constructor (xCoordOfAppearance, context) {\n    super()\n\n    const point1 = new Point(xCoordOfAppearance - SQUARE_SIDE_LENGTH, 0)\n    const pointOfTranslation = new Point(xCoordOfAppearance, 0)\n    const point2 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, 0)\n    const point3 = new Point(xCoordOfAppearance + SQUARE_SIDE_LENGTH, SQUARE_SIDE_LENGTH)\n\n    const otherPoints = [point1, point2, point3]\n\n    const fillStyle = 'darksalmon'\n\n    super.init(fillStyle, pointOfTranslation, otherPoints, context)\n  }\n}\n\nconst shapeTypes = {\n  I,\n  O,\n  L,\n  J,\n  S,\n  Z,\n  T\n}\n\nexport default shapeTypes\n","import { Game } from './game/game.js'\nimport { ShapeGenerator } from './shape-generator/shape-generator.js'\n\nconst canvas = document.createElement('canvas')\ncanvas.setAttribute('id', 'gameCanvas')\n\nconst gameContainer = document.getElementById('gameContainer')\ngameContainer.append(canvas)\n\nconst context = canvas.getContext('2d')\nconst shapeGenerator = new ShapeGenerator(canvas, context)\nconst game = new Game(canvas, context, shapeGenerator)\ngame.init()\n","import shapeTypes from '../shape/shape.js'\n\nexport class ShapeGenerator {\n  constructor (canvas, context) {\n    this.canvas = canvas\n    this.context = context\n  }\n\n  generateShape () {\n    const shapeTypesAsArray = Object.values(shapeTypes)\n    const chosenShapeIndex = Math.round(Math.random() * (shapeTypesAsArray.length - 1))\n    const ChosenShapeType = shapeTypesAsArray[chosenShapeIndex]\n    const xCoordinateOfAppearance = this.canvas.width / 2\n    const shape = new ChosenShapeType(xCoordinateOfAppearance, this.context)\n    return shape\n  }\n}\n"],"sourceRoot":""}